
Mech-Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000762  000007f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000762  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  0080011c  0080011c  00000812  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000812  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000844  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001412  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4f  00000000  00000000  00001dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000987  00000000  00000000  00002825  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  000031ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000642  00000000  00000000  00003444  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b97  00000000  00000000  00003a86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000461d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 3a       	cpi	r26, 0xA2	; 162
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  9e:	0c 94 af 03 	jmp	0x75e	; 0x75e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <digital_filter_init>:
float b[5] = {0.018563010626897, 0.074252042507589, 0.111378063761383, 0.074252042507589, 0.018563010626897}; // cutoff frequency was 150
float a[5] = {1.000000000000000,  -1.570398851228171,  1.275613324983279, -0.484403368335085, 0.076197064610332};
uint8_t i;

/* Initialization */
void digital_filter_init(float reading){
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	6b 01       	movw	r12, r22
  b0:	7c 01       	movw	r14, r24
	rb_initialize_F(&inputs);
  b2:	80 e6       	ldi	r24, 0x60	; 96
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	0e 94 09 02 	call	0x412	; 0x412 <rb_initialize_F>
	rb_initialize_F(&outputs);
  ba:	8e e1       	ldi	r24, 0x1E	; 30
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0e 94 09 02 	call	0x412	; 0x412 <rb_initialize_F>
	
	for(i = 0; i <= 7; i++){	
  c2:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <i>
		rb_push_front_F(&inputs, reading);
  c6:	b7 01       	movw	r22, r14
  c8:	a6 01       	movw	r20, r12
  ca:	80 e6       	ldi	r24, 0x60	; 96
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	0e 94 1b 02 	call	0x436	; 0x436 <rb_push_front_F>
		rb_push_front_F(&outputs, reading);
  d2:	b7 01       	movw	r22, r14
  d4:	a6 01       	movw	r20, r12
  d6:	8e e1       	ldi	r24, 0x1E	; 30
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 1b 02 	call	0x436	; 0x436 <rb_push_front_F>
/* Initialization */
void digital_filter_init(float reading){
	rb_initialize_F(&inputs);
	rb_initialize_F(&outputs);
	
	for(i = 0; i <= 7; i++){	
  de:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <i>
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <i>
  e8:	88 30       	cpi	r24, 0x08	; 8
  ea:	68 f3       	brcs	.-38     	; 0xc6 <digital_filter_init+0x20>
		rb_push_front_F(&inputs, reading);
		rb_push_front_F(&outputs, reading);
	}
	
	return;
}
  ec:	ff 90       	pop	r15
  ee:	ef 90       	pop	r14
  f0:	df 90       	pop	r13
  f2:	cf 90       	pop	r12
  f4:	08 95       	ret

000000f6 <USART_Init>:
  f6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  fe:	88 e1       	ldi	r24, 0x18	; 24
 100:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 104:	86 e0       	ldi	r24, 0x06	; 6
 106:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 10a:	08 95       	ret

0000010c <print_byte>:
 10c:	e0 ec       	ldi	r30, 0xC0	; 192
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	90 81       	ld	r25, Z
 112:	95 ff       	sbrs	r25, 5
 114:	fd cf       	rjmp	.-6      	; 0x110 <print_byte+0x4>
 116:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 11a:	08 95       	ret

0000011c <print_float>:
 11c:	ef 92       	push	r14
 11e:	ff 92       	push	r15
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	00 d0       	rcall	.+0      	; 0x12a <print_float+0xe>
 12a:	00 d0       	rcall	.+0      	; 0x12c <print_float+0x10>
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	69 83       	std	Y+1, r22	; 0x01
 132:	7a 83       	std	Y+2, r23	; 0x02
 134:	8b 83       	std	Y+3, r24	; 0x03
 136:	9c 83       	std	Y+4, r25	; 0x04
 138:	8e 01       	movw	r16, r28
 13a:	0f 5f       	subi	r16, 0xFF	; 255
 13c:	1f 4f       	sbci	r17, 0xFF	; 255
 13e:	7e 01       	movw	r14, r28
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	e8 0e       	add	r14, r24
 144:	f1 1c       	adc	r15, r1
 146:	f8 01       	movw	r30, r16
 148:	81 91       	ld	r24, Z+
 14a:	8f 01       	movw	r16, r30
 14c:	0e 94 86 00 	call	0x10c	; 0x10c <print_byte>
 150:	0e 15       	cp	r16, r14
 152:	1f 05       	cpc	r17, r15
 154:	c1 f7       	brne	.-16     	; 0x146 <print_float+0x2a>
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	ff 90       	pop	r15
 168:	ef 90       	pop	r14
 16a:	08 95       	ret

0000016c <timer0_init>:
}

void timer0_init()
{	
	// enable CTC for Timer0
	TCCR0A |= (1 << WGM01);
 16c:	84 b5       	in	r24, 0x24	; 36
 16e:	82 60       	ori	r24, 0x02	; 2
 170:	84 bd       	out	0x24, r24	; 36
	// enable prescaler of 1024 for Timer0
	TCCR0B |= (1 << CS02)|(1 << CS00);	
 172:	85 b5       	in	r24, 0x25	; 37
 174:	85 60       	ori	r24, 0x05	; 5
 176:	85 bd       	out	0x25, r24	; 37
	// initialize counter to zero
	TCNT0 = 0;	
 178:	16 bc       	out	0x26, r1	; 38
	// initialize compare value for CTC
	OCR0A = 155;
 17a:	8b e9       	ldi	r24, 0x9B	; 155
 17c:	87 bd       	out	0x27, r24	; 39
 17e:	08 95       	ret

00000180 <timer1_init>:
}

void timer1_init()
{
	TCCR1A |= 0;
 180:	e0 e8       	ldi	r30, 0x80	; 128
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	80 83       	st	Z, r24
	// Enable CTC for Timer1 with no prescaler
	TCCR1B |= (1 << WGM12)|(1 << CS10);
 188:	e1 e8       	ldi	r30, 0x81	; 129
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	89 60       	ori	r24, 0x09	; 9
 190:	80 83       	st	Z, r24
	// initialize counter to zero
	TCNT1 = 0;	
 192:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 196:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	// initialize compare value
	OCR1B = 15999;
 19a:	8f e7       	ldi	r24, 0x7F	; 127
 19c:	9e e3       	ldi	r25, 0x3E	; 62
 19e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 1a2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 1a6:	08 95       	ret

000001a8 <adc_init>:


void adc_init() {
	
	//Set reference to built in channels
	ADMUX = (1<<REFS0);
 1a8:	80 e4       	ldi	r24, 0x40	; 64
 1aa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	//Enable ADC w/  prescaler
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 1ae:	87 e8       	ldi	r24, 0x87	; 135
 1b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 1b4:	08 95       	ret

000001b6 <adc_read>:

uint16_t adc_read(uint8_t ch)
{
	//select channel to read
	ch &= 0b00000111;
	ADMUX = (ADMUX & 0xF8)|ch;	
 1b6:	ec e7       	ldi	r30, 0x7C	; 124
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	90 81       	ld	r25, Z
 1bc:	98 7f       	andi	r25, 0xF8	; 248
 1be:	87 70       	andi	r24, 0x07	; 7
 1c0:	89 2b       	or	r24, r25
 1c2:	80 83       	st	Z, r24
	//start conversion
	ADCSRA |= (1<<ADSC);	
 1c4:	ea e7       	ldi	r30, 0x7A	; 122
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	80 64       	ori	r24, 0x40	; 64
 1cc:	80 83       	st	Z, r24
	//wait for conversion to complete
	while(ADCSRA & (1<<ADSC));	
 1ce:	80 81       	ld	r24, Z
 1d0:	86 fd       	sbrc	r24, 6
 1d2:	fd cf       	rjmp	.-6      	; 0x1ce <adc_read+0x18>
	//return result
	return (ADC);
 1d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 1d8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 1dc:	08 95       	ret

000001de <main>:
void adc_init();
uint16_t adc_read(uint8_t ch);


int main(void)
{
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	ce 56       	subi	r28, 0x6E	; 110
 1e8:	d1 09       	sbc	r29, r1
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	f8 94       	cli
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	cd bf       	out	0x3d, r28	; 61
	struct Ring_Buffer_F input_queue;
	struct Ring_Buffer_C output_queue;
	USART_Init(MYUBRR);
 1f4:	87 e6       	ldi	r24, 0x67	; 103
 1f6:	0e 94 7b 00 	call	0xf6	; 0xf6 <USART_Init>
	rb_initialize_F(&input_queue);
 1fa:	ce 01       	movw	r24, r28
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	0e 94 09 02 	call	0x412	; 0x412 <rb_initialize_F>
    rb_initialize_C(&output_queue);
 202:	ce 01       	movw	r24, r28
 204:	8d 5b       	subi	r24, 0xBD	; 189
 206:	9f 4f       	sbci	r25, 0xFF	; 255
 208:	0e 94 10 02 	call	0x420	; 0x420 <rb_initialize_C>
	//union floatChar filteredVel;

	timer0_init();
 20c:	0e 94 b6 00 	call	0x16c	; 0x16c <timer0_init>
	timer1_init();
 210:	0e 94 c0 00 	call	0x180	; 0x180 <timer1_init>
	adc_init();
 214:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <adc_init>
	
	//Set AI0 to Output and rest as Input
	DDRC |= 0b00000001;
 218:	38 9a       	sbi	0x07, 0	; 7
	
	//Set output to 1 to power sensor
	PORTC |= 0b00000001;
 21a:	40 9a       	sbi	0x08, 0	; 8
	float angVel = 0;
	float filteredVel = 0;
	float term;
	int i;
	int j;
	float conv[7] = {-1.0193E-13, 3.0609E-10, -3.5356E-7, 1.9698E-4, -0.0543, 7.2116, -354.5305};
 21c:	8c e1       	ldi	r24, 0x1C	; 28
 21e:	e0 e0       	ldi	r30, 0x00	; 0
 220:	f1 e0       	ldi	r31, 0x01	; 1
 222:	de 01       	movw	r26, r28
 224:	a3 5b       	subi	r26, 0xB3	; 179
 226:	bf 4f       	sbci	r27, 0xFF	; 255
 228:	01 90       	ld	r0, Z+
 22a:	0d 92       	st	X+, r0
 22c:	8a 95       	dec	r24
 22e:	e1 f7       	brne	.-8      	; 0x228 <main+0x4a>
	float sampPer = 1000;
	float volt = 0;
	float angPos = 0;
	float angPosLast = 0;
	float angVel = 0;
	float filteredVel = 0;
 230:	c1 2c       	mov	r12, r1
 232:	d1 2c       	mov	r13, r1
 234:	76 01       	movw	r14, r12
	PORTC |= 0b00000001;
	
	//Sampling frequency for converting to velocity, 1/0.001
	float sampPer = 1000;
	float volt = 0;
	float angPos = 0;
 236:	aa 96       	adiw	r28, 0x2a	; 42
 238:	1f ae       	std	Y+63, r1	; 0x3f
 23a:	aa 97       	sbiw	r28, 0x2a	; 42
 23c:	ab 96       	adiw	r28, 0x2b	; 43
 23e:	1f ae       	std	Y+63, r1	; 0x3f
 240:	ab 97       	sbiw	r28, 0x2b	; 43
 242:	ac 96       	adiw	r28, 0x2c	; 44
 244:	1f ae       	std	Y+63, r1	; 0x3f
 246:	ac 97       	sbiw	r28, 0x2c	; 44
 248:	ad 96       	adiw	r28, 0x2d	; 45
 24a:	1f ae       	std	Y+63, r1	; 0x3f
 24c:	ad 97       	sbiw	r28, 0x2d	; 45
			//convert to position in radians
			//inefficient
			//angPos = abs((-1.0193E-13)*(pow(volt,6)) + (3.0609E-10)*(pow(volt,5)) + (-3.5356E-7)*(pow(volt,4)) + (1.9698E-4)*(pow(volt,3)) + -0.0543*(pow(volt,2)) + 7.2116*volt + (-354.5305)); 
			for(i = 0; i < sizeof(conv); i++)
			{
				if(i > 0)
 24e:	0f 2e       	mov	r0, r31
 250:	fb e1       	ldi	r31, 0x1B	; 27
 252:	2f 2e       	mov	r2, r31
 254:	31 2c       	mov	r3, r1
 256:	f0 2d       	mov	r31, r0
	int j;
	float conv[7] = {-1.0193E-13, 3.0609E-10, -3.5356E-7, 1.9698E-4, -0.0543, 7.2116, -354.5305};
    while (1) 
    {
		//if TIMER0_flag
		if((TIFR0 & (1 << OCF0A)))
 258:	a9 9b       	sbis	0x15, 1	; 21
 25a:	d8 c0       	rjmp	.+432    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		{
			/*for(int i=0; i <4; i++){
				rb_push_back_C(&output_queue, filteredVel.asChars[i]);
			}*/
			print_float(filteredVel); //edit so we don't drop readings during prints
 25c:	c7 01       	movw	r24, r14
 25e:	b6 01       	movw	r22, r12
 260:	0e 94 8e 00 	call	0x11c	; 0x11c <print_float>
			//reset TIMER0_flag
			TIFR0 |= (1 << OCF0A);
 264:	a9 9a       	sbi	0x15, 1	; 21
		}
		//if TIMER1_flag
		if((TIFR1 & (1 << OCF1A)))
 266:	b1 9b       	sbis	0x16, 1	; 22
 268:	b6 c0       	rjmp	.+364    	; 0x3d6 <main+0x1f8>
		{
			//read voltage 
			volt = adc_read(1);	
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <adc_read>
 270:	bc 01       	movw	r22, r24
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 b4 02 	call	0x568	; 0x568 <__floatunsisf>
 27a:	4b 01       	movw	r8, r22
 27c:	5c 01       	movw	r10, r24
 27e:	6e 01       	movw	r12, r28
 280:	8d e4       	ldi	r24, 0x4D	; 77
 282:	c8 0e       	add	r12, r24
 284:	d1 1c       	adc	r13, r1
	PORTC |= 0b00000001;
	
	//Sampling frequency for converting to velocity, 1/0.001
	float sampPer = 1000;
	float volt = 0;
	float angPos = 0;
 286:	aa 96       	adiw	r28, 0x2a	; 42
 288:	7f ac       	ldd	r7, Y+63	; 0x3f
 28a:	aa 97       	sbiw	r28, 0x2a	; 42
 28c:	ab 96       	adiw	r28, 0x2b	; 43
 28e:	6f ac       	ldd	r6, Y+63	; 0x3f
 290:	ab 97       	sbiw	r28, 0x2b	; 43
 292:	ac 96       	adiw	r28, 0x2c	; 44
 294:	5f ac       	ldd	r5, Y+63	; 0x3f
 296:	ac 97       	sbiw	r28, 0x2c	; 44
 298:	ad 96       	adiw	r28, 0x2d	; 45
 29a:	4f ac       	ldd	r4, Y+63	; 0x3f
 29c:	ad 97       	sbiw	r28, 0x2d	; 45
 29e:	0f 2e       	mov	r0, r31
 2a0:	fb e1       	ldi	r31, 0x1B	; 27
 2a2:	ef 2e       	mov	r14, r31
 2a4:	f1 2c       	mov	r15, r1
 2a6:	f0 2d       	mov	r31, r0
			//convert to position in radians
			//inefficient
			//angPos = abs((-1.0193E-13)*(pow(volt,6)) + (3.0609E-10)*(pow(volt,5)) + (-3.5356E-7)*(pow(volt,4)) + (1.9698E-4)*(pow(volt,3)) + -0.0543*(pow(volt,2)) + 7.2116*volt + (-354.5305)); 
			for(i = 0; i < sizeof(conv); i++)
			{
				if(i > 0)
 2a8:	c1 01       	movw	r24, r2
 2aa:	8e 19       	sub	r24, r14
 2ac:	9f 09       	sbc	r25, r15
 2ae:	18 16       	cp	r1, r24
 2b0:	19 06       	cpc	r1, r25
 2b2:	0c f0       	brlt	.+2      	; 0x2b6 <main+0xd8>
 2b4:	3e c0       	rjmp	.+124    	; 0x332 <main+0x154>
				{
					for(j = sizeof(conv)-i-1; j > 0; j--)
 2b6:	87 01       	movw	r16, r14
 2b8:	1e 14       	cp	r1, r14
 2ba:	1f 04       	cpc	r1, r15
 2bc:	04 f5       	brge	.+64     	; 0x2fe <main+0x120>
 2be:	b0 e0       	ldi	r27, 0x00	; 0
 2c0:	a0 e0       	ldi	r26, 0x00	; 0
 2c2:	ae 96       	adiw	r28, 0x2e	; 46
 2c4:	1f ae       	std	Y+63, r1	; 0x3f
 2c6:	ae 97       	sbiw	r28, 0x2e	; 46
 2c8:	af 96       	adiw	r28, 0x2f	; 47
 2ca:	1f ae       	std	Y+63, r1	; 0x3f
 2cc:	af 97       	sbiw	r28, 0x2f	; 47
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	e0 e0       	ldi	r30, 0x00	; 0
					{
						term *= volt;
 2d2:	a5 01       	movw	r20, r10
 2d4:	94 01       	movw	r18, r8
 2d6:	6b 2f       	mov	r22, r27
 2d8:	7a 2f       	mov	r23, r26
 2da:	8f 2f       	mov	r24, r31
 2dc:	9e 2f       	mov	r25, r30
 2de:	0e 94 42 03 	call	0x684	; 0x684 <__mulsf3>
 2e2:	b6 2f       	mov	r27, r22
 2e4:	a7 2f       	mov	r26, r23
 2e6:	f8 2f       	mov	r31, r24
 2e8:	e9 2f       	mov	r30, r25
			//angPos = abs((-1.0193E-13)*(pow(volt,6)) + (3.0609E-10)*(pow(volt,5)) + (-3.5356E-7)*(pow(volt,4)) + (1.9698E-4)*(pow(volt,3)) + -0.0543*(pow(volt,2)) + 7.2116*volt + (-354.5305)); 
			for(i = 0; i < sizeof(conv); i++)
			{
				if(i > 0)
				{
					for(j = sizeof(conv)-i-1; j > 0; j--)
 2ea:	01 50       	subi	r16, 0x01	; 1
 2ec:	11 09       	sbc	r17, r1
 2ee:	89 f7       	brne	.-30     	; 0x2d2 <main+0xf4>
 2f0:	ae 96       	adiw	r28, 0x2e	; 46
 2f2:	8f af       	std	Y+63, r24	; 0x3f
 2f4:	ae 97       	sbiw	r28, 0x2e	; 46
 2f6:	af 96       	adiw	r28, 0x2f	; 47
 2f8:	9f af       	std	Y+63, r25	; 0x3f
 2fa:	af 97       	sbiw	r28, 0x2f	; 47
 2fc:	08 c0       	rjmp	.+16     	; 0x30e <main+0x130>
 2fe:	b0 e0       	ldi	r27, 0x00	; 0
 300:	a0 e0       	ldi	r26, 0x00	; 0
 302:	ae 96       	adiw	r28, 0x2e	; 46
 304:	1f ae       	std	Y+63, r1	; 0x3f
 306:	ae 97       	sbiw	r28, 0x2e	; 46
 308:	af 96       	adiw	r28, 0x2f	; 47
 30a:	1f ae       	std	Y+63, r1	; 0x3f
 30c:	af 97       	sbiw	r28, 0x2f	; 47
					{
						term *= volt;
					}
					term *= conv[i];
 30e:	f6 01       	movw	r30, r12
 310:	20 81       	ld	r18, Z
 312:	31 81       	ldd	r19, Z+1	; 0x01
 314:	42 81       	ldd	r20, Z+2	; 0x02
 316:	53 81       	ldd	r21, Z+3	; 0x03
 318:	6b 2f       	mov	r22, r27
 31a:	7a 2f       	mov	r23, r26
 31c:	ae 96       	adiw	r28, 0x2e	; 46
 31e:	8f ad       	ldd	r24, Y+63	; 0x3f
 320:	ae 97       	sbiw	r28, 0x2e	; 46
 322:	af 96       	adiw	r28, 0x2f	; 47
 324:	9f ad       	ldd	r25, Y+63	; 0x3f
 326:	af 97       	sbiw	r28, 0x2f	; 47
 328:	0e 94 42 03 	call	0x684	; 0x684 <__mulsf3>
 32c:	9b 01       	movw	r18, r22
 32e:	ac 01       	movw	r20, r24
 330:	05 c0       	rjmp	.+10     	; 0x33c <main+0x15e>
				} else
				{
					term = conv[i];
 332:	f6 01       	movw	r30, r12
 334:	20 81       	ld	r18, Z
 336:	31 81       	ldd	r19, Z+1	; 0x01
 338:	42 81       	ldd	r20, Z+2	; 0x02
 33a:	53 81       	ldd	r21, Z+3	; 0x03
				}
				angPos += term;
 33c:	67 2d       	mov	r22, r7
 33e:	76 2d       	mov	r23, r6
 340:	85 2d       	mov	r24, r5
 342:	94 2d       	mov	r25, r4
 344:	0e 94 48 02 	call	0x490	; 0x490 <__addsf3>
 348:	76 2e       	mov	r7, r22
 34a:	67 2e       	mov	r6, r23
 34c:	58 2e       	mov	r5, r24
 34e:	49 2e       	mov	r4, r25
 350:	f1 e0       	ldi	r31, 0x01	; 1
 352:	ef 1a       	sub	r14, r31
 354:	f1 08       	sbc	r15, r1
 356:	84 e0       	ldi	r24, 0x04	; 4
 358:	c8 0e       	add	r12, r24
 35a:	d1 1c       	adc	r13, r1
			//read voltage 
			volt = adc_read(1);	
			//convert to position in radians
			//inefficient
			//angPos = abs((-1.0193E-13)*(pow(volt,6)) + (3.0609E-10)*(pow(volt,5)) + (-3.5356E-7)*(pow(volt,4)) + (1.9698E-4)*(pow(volt,3)) + -0.0543*(pow(volt,2)) + 7.2116*volt + (-354.5305)); 
			for(i = 0; i < sizeof(conv); i++)
 35c:	ef ef       	ldi	r30, 0xFF	; 255
 35e:	ee 16       	cp	r14, r30
 360:	fe 06       	cpc	r15, r30
 362:	09 f0       	breq	.+2      	; 0x366 <main+0x188>
 364:	a1 cf       	rjmp	.-190    	; 0x2a8 <main+0xca>
			
			//wrap result

			//convert to velocity
			// handle wrapping
			angVel = (angPos - angPosLast) *0.00277778*sampPer; // rev/s
 366:	aa 96       	adiw	r28, 0x2a	; 42
 368:	2f ad       	ldd	r18, Y+63	; 0x3f
 36a:	aa 97       	sbiw	r28, 0x2a	; 42
 36c:	ab 96       	adiw	r28, 0x2b	; 43
 36e:	3f ad       	ldd	r19, Y+63	; 0x3f
 370:	ab 97       	sbiw	r28, 0x2b	; 43
 372:	ac 96       	adiw	r28, 0x2c	; 44
 374:	4f ad       	ldd	r20, Y+63	; 0x3f
 376:	ac 97       	sbiw	r28, 0x2c	; 44
 378:	ad 96       	adiw	r28, 0x2d	; 45
 37a:	5f ad       	ldd	r21, Y+63	; 0x3f
 37c:	ad 97       	sbiw	r28, 0x2d	; 45
 37e:	67 2d       	mov	r22, r7
 380:	76 2d       	mov	r23, r6
 382:	85 2d       	mov	r24, r5
 384:	94 2d       	mov	r25, r4
 386:	0e 94 47 02 	call	0x48e	; 0x48e <__subsf3>
 38a:	2a e6       	ldi	r18, 0x6A	; 106
 38c:	3b e0       	ldi	r19, 0x0B	; 11
 38e:	46 e3       	ldi	r20, 0x36	; 54
 390:	5b e3       	ldi	r21, 0x3B	; 59
 392:	0e 94 42 03 	call	0x684	; 0x684 <__mulsf3>
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	4a e7       	ldi	r20, 0x7A	; 122
 39c:	54 e4       	ldi	r21, 0x44	; 68
 39e:	0e 94 42 03 	call	0x684	; 0x684 <__mulsf3>
 3a2:	6b 01       	movw	r12, r22
 3a4:	7c 01       	movw	r14, r24
			
			if(!filtInit){
 3a6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 3aa:	81 11       	cpse	r24, r1
 3ac:	07 c0       	rjmp	.+14     	; 0x3bc <main+0x1de>
				digital_filter_init(angVel);
 3ae:	c7 01       	movw	r24, r14
 3b0:	b6 01       	movw	r22, r12
 3b2:	0e 94 53 00 	call	0xa6	; 0xa6 <digital_filter_init>
				filtInit = 1;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
			//filter velocity
			//filteredVel.asFloat = filterValue(angVel);
			//filteredVel = filterValue(angVel);
			filteredVel = angVel;	
			//reset TIMER1_flag
			TIFR1 |= (1 << OCF1A);
 3bc:	b1 9a       	sbi	0x16, 1	; 22
					term *= conv[i];
				} else
				{
					term = conv[i];
				}
				angPos += term;
 3be:	aa 96       	adiw	r28, 0x2a	; 42
 3c0:	7f ae       	std	Y+63, r7	; 0x3f
 3c2:	aa 97       	sbiw	r28, 0x2a	; 42
 3c4:	ab 96       	adiw	r28, 0x2b	; 43
 3c6:	6f ae       	std	Y+63, r6	; 0x3f
 3c8:	ab 97       	sbiw	r28, 0x2b	; 43
 3ca:	ac 96       	adiw	r28, 0x2c	; 44
 3cc:	5f ae       	std	Y+63, r5	; 0x3f
 3ce:	ac 97       	sbiw	r28, 0x2c	; 44
 3d0:	ad 96       	adiw	r28, 0x2d	; 45
 3d2:	4f ae       	std	Y+63, r4	; 0x3f
 3d4:	ad 97       	sbiw	r28, 0x2d	; 45
			//filteredVel = filterValue(angVel);
			filteredVel = angVel;	
			//reset TIMER1_flag
			TIFR1 |= (1 << OCF1A);
		} 
		if (rb_length_C(&output_queue) > 0){
 3d6:	ce 01       	movw	r24, r28
 3d8:	8d 5b       	subi	r24, 0xBD	; 189
 3da:	9f 4f       	sbci	r25, 0xFF	; 255
 3dc:	0e 94 14 02 	call	0x428	; 0x428 <rb_length_C>
 3e0:	88 23       	and	r24, r24
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <main+0x208>
 3e4:	39 cf       	rjmp	.-398    	; 0x258 <main+0x7a>
			print_byte(rb_pop_front_C(&output_queue));
 3e6:	ce 01       	movw	r24, r28
 3e8:	8d 5b       	subi	r24, 0xBD	; 189
 3ea:	9f 4f       	sbci	r25, 0xFF	; 255
 3ec:	0e 94 36 02 	call	0x46c	; 0x46c <rb_pop_front_C>
 3f0:	0e 94 86 00 	call	0x10c	; 0x10c <print_byte>
 3f4:	31 cf       	rjmp	.-414    	; 0x258 <main+0x7a>
		}
		//if TIMER1_flag
		if((TIFR1 & (1 << OCF1A)))
		{
			//read voltage 
			volt = adc_read(1);	
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <adc_read>
 3fc:	bc 01       	movw	r22, r24
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 b4 02 	call	0x568	; 0x568 <__floatunsisf>
 406:	4b 01       	movw	r8, r22
 408:	5c 01       	movw	r10, r24
 40a:	39 cf       	rjmp	.-398    	; 0x27e <main+0xa0>
			print_float(filteredVel); //edit so we don't drop readings during prints
			//reset TIMER0_flag
			TIFR0 |= (1 << OCF0A);
		}
		//if TIMER1_flag
		if((TIFR1 & (1 << OCF1A)))
 40c:	b1 99       	sbic	0x16, 1	; 22
 40e:	f3 cf       	rjmp	.-26     	; 0x3f6 <main+0x218>
 410:	e2 cf       	rjmp	.-60     	; 0x3d6 <main+0x1f8>

00000412 <rb_initialize_F>:
    }
    else {
        return 0;
    }
    
}
 412:	fc 01       	movw	r30, r24
 414:	e0 5c       	subi	r30, 0xC0	; 192
 416:	ff 4f       	sbci	r31, 0xFF	; 255
 418:	10 82       	st	Z, r1
 41a:	31 96       	adiw	r30, 0x01	; 1
 41c:	10 82       	st	Z, r1
 41e:	08 95       	ret

00000420 <rb_initialize_C>:
 420:	fc 01       	movw	r30, r24
 422:	10 86       	std	Z+8, r1	; 0x08
 424:	11 86       	std	Z+9, r1	; 0x09
 426:	08 95       	ret

00000428 <rb_length_C>:
 428:	fc 01       	movw	r30, r24
 42a:	91 85       	ldd	r25, Z+9	; 0x09
 42c:	80 85       	ldd	r24, Z+8	; 0x08
 42e:	98 1b       	sub	r25, r24
 430:	89 2f       	mov	r24, r25
 432:	87 70       	andi	r24, 0x07	; 7
 434:	08 95       	ret

00000436 <rb_push_front_F>:
 436:	9c 01       	movw	r18, r24
 438:	fc 01       	movw	r30, r24
 43a:	e0 5c       	subi	r30, 0xC0	; 192
 43c:	ff 4f       	sbci	r31, 0xFF	; 255
 43e:	90 81       	ld	r25, Z
 440:	91 50       	subi	r25, 0x01	; 1
 442:	9f 70       	andi	r25, 0x0F	; 15
 444:	90 83       	st	Z, r25
 446:	31 96       	adiw	r30, 0x01	; 1
 448:	80 81       	ld	r24, Z
 44a:	98 13       	cpse	r25, r24
 44c:	04 c0       	rjmp	.+8      	; 0x456 <rb_push_front_F+0x20>
 44e:	8f ef       	ldi	r24, 0xFF	; 255
 450:	89 0f       	add	r24, r25
 452:	8f 70       	andi	r24, 0x0F	; 15
 454:	80 83       	st	Z, r24
 456:	f9 01       	movw	r30, r18
 458:	84 e0       	ldi	r24, 0x04	; 4
 45a:	98 9f       	mul	r25, r24
 45c:	e0 0d       	add	r30, r0
 45e:	f1 1d       	adc	r31, r1
 460:	11 24       	eor	r1, r1
 462:	40 83       	st	Z, r20
 464:	51 83       	std	Z+1, r21	; 0x01
 466:	62 83       	std	Z+2, r22	; 0x02
 468:	73 83       	std	Z+3, r23	; 0x03
 46a:	08 95       	ret

0000046c <rb_pop_front_C>:
char  rb_pop_front_C( struct Ring_Buffer_C* p_buf)
{
 46c:	fc 01       	movw	r30, r24
    // get value to return at front
    // if end does not equal start (length zero),
    //    increase start index by 1 and mask
    // return value
    char value = p_buf->buffer[p_buf->start_index];
 46e:	90 85       	ldd	r25, Z+8	; 0x08
 470:	29 2f       	mov	r18, r25
 472:	30 e0       	ldi	r19, 0x00	; 0
    if(p_buf->start_index != p_buf->end_index){
 474:	81 85       	ldd	r24, Z+9	; 0x09
 476:	98 17       	cp	r25, r24
 478:	41 f0       	breq	.+16     	; 0x48a <rb_pop_front_C+0x1e>
{
    // get value to return at front
    // if end does not equal start (length zero),
    //    increase start index by 1 and mask
    // return value
    char value = p_buf->buffer[p_buf->start_index];
 47a:	df 01       	movw	r26, r30
 47c:	a2 0f       	add	r26, r18
 47e:	b3 1f       	adc	r27, r19
 480:	8c 91       	ld	r24, X
    if(p_buf->start_index != p_buf->end_index){
        p_buf->start_index = (p_buf->start_index + 1) & RB_MASK_F;
 482:	9f 5f       	subi	r25, 0xFF	; 255
 484:	9f 70       	andi	r25, 0x0F	; 15
 486:	90 87       	std	Z+8, r25	; 0x08
        return value; // update
 488:	08 95       	ret
    } 
    else {
        return 0;
 48a:	80 e0       	ldi	r24, 0x00	; 0
    }
   
}
 48c:	08 95       	ret

0000048e <__subsf3>:
 48e:	50 58       	subi	r21, 0x80	; 128

00000490 <__addsf3>:
 490:	bb 27       	eor	r27, r27
 492:	aa 27       	eor	r26, r26
 494:	0e 94 5f 02 	call	0x4be	; 0x4be <__addsf3x>
 498:	0c 94 08 03 	jmp	0x610	; 0x610 <__fp_round>
 49c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__fp_pscA>
 4a0:	38 f0       	brcs	.+14     	; 0x4b0 <__addsf3+0x20>
 4a2:	0e 94 01 03 	call	0x602	; 0x602 <__fp_pscB>
 4a6:	20 f0       	brcs	.+8      	; 0x4b0 <__addsf3+0x20>
 4a8:	39 f4       	brne	.+14     	; 0x4b8 <__addsf3+0x28>
 4aa:	9f 3f       	cpi	r25, 0xFF	; 255
 4ac:	19 f4       	brne	.+6      	; 0x4b4 <__addsf3+0x24>
 4ae:	26 f4       	brtc	.+8      	; 0x4b8 <__addsf3+0x28>
 4b0:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__fp_nan>
 4b4:	0e f4       	brtc	.+2      	; 0x4b8 <__addsf3+0x28>
 4b6:	e0 95       	com	r30
 4b8:	e7 fb       	bst	r30, 7
 4ba:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__fp_inf>

000004be <__addsf3x>:
 4be:	e9 2f       	mov	r30, r25
 4c0:	0e 94 19 03 	call	0x632	; 0x632 <__fp_split3>
 4c4:	58 f3       	brcs	.-42     	; 0x49c <__addsf3+0xc>
 4c6:	ba 17       	cp	r27, r26
 4c8:	62 07       	cpc	r22, r18
 4ca:	73 07       	cpc	r23, r19
 4cc:	84 07       	cpc	r24, r20
 4ce:	95 07       	cpc	r25, r21
 4d0:	20 f0       	brcs	.+8      	; 0x4da <__addsf3x+0x1c>
 4d2:	79 f4       	brne	.+30     	; 0x4f2 <__addsf3x+0x34>
 4d4:	a6 f5       	brtc	.+104    	; 0x53e <__addsf3x+0x80>
 4d6:	0c 94 3b 03 	jmp	0x676	; 0x676 <__fp_zero>
 4da:	0e f4       	brtc	.+2      	; 0x4de <__addsf3x+0x20>
 4dc:	e0 95       	com	r30
 4de:	0b 2e       	mov	r0, r27
 4e0:	ba 2f       	mov	r27, r26
 4e2:	a0 2d       	mov	r26, r0
 4e4:	0b 01       	movw	r0, r22
 4e6:	b9 01       	movw	r22, r18
 4e8:	90 01       	movw	r18, r0
 4ea:	0c 01       	movw	r0, r24
 4ec:	ca 01       	movw	r24, r20
 4ee:	a0 01       	movw	r20, r0
 4f0:	11 24       	eor	r1, r1
 4f2:	ff 27       	eor	r31, r31
 4f4:	59 1b       	sub	r21, r25
 4f6:	99 f0       	breq	.+38     	; 0x51e <__addsf3x+0x60>
 4f8:	59 3f       	cpi	r21, 0xF9	; 249
 4fa:	50 f4       	brcc	.+20     	; 0x510 <__addsf3x+0x52>
 4fc:	50 3e       	cpi	r21, 0xE0	; 224
 4fe:	68 f1       	brcs	.+90     	; 0x55a <__addsf3x+0x9c>
 500:	1a 16       	cp	r1, r26
 502:	f0 40       	sbci	r31, 0x00	; 0
 504:	a2 2f       	mov	r26, r18
 506:	23 2f       	mov	r18, r19
 508:	34 2f       	mov	r19, r20
 50a:	44 27       	eor	r20, r20
 50c:	58 5f       	subi	r21, 0xF8	; 248
 50e:	f3 cf       	rjmp	.-26     	; 0x4f6 <__addsf3x+0x38>
 510:	46 95       	lsr	r20
 512:	37 95       	ror	r19
 514:	27 95       	ror	r18
 516:	a7 95       	ror	r26
 518:	f0 40       	sbci	r31, 0x00	; 0
 51a:	53 95       	inc	r21
 51c:	c9 f7       	brne	.-14     	; 0x510 <__addsf3x+0x52>
 51e:	7e f4       	brtc	.+30     	; 0x53e <__addsf3x+0x80>
 520:	1f 16       	cp	r1, r31
 522:	ba 0b       	sbc	r27, r26
 524:	62 0b       	sbc	r22, r18
 526:	73 0b       	sbc	r23, r19
 528:	84 0b       	sbc	r24, r20
 52a:	ba f0       	brmi	.+46     	; 0x55a <__addsf3x+0x9c>
 52c:	91 50       	subi	r25, 0x01	; 1
 52e:	a1 f0       	breq	.+40     	; 0x558 <__addsf3x+0x9a>
 530:	ff 0f       	add	r31, r31
 532:	bb 1f       	adc	r27, r27
 534:	66 1f       	adc	r22, r22
 536:	77 1f       	adc	r23, r23
 538:	88 1f       	adc	r24, r24
 53a:	c2 f7       	brpl	.-16     	; 0x52c <__addsf3x+0x6e>
 53c:	0e c0       	rjmp	.+28     	; 0x55a <__addsf3x+0x9c>
 53e:	ba 0f       	add	r27, r26
 540:	62 1f       	adc	r22, r18
 542:	73 1f       	adc	r23, r19
 544:	84 1f       	adc	r24, r20
 546:	48 f4       	brcc	.+18     	; 0x55a <__addsf3x+0x9c>
 548:	87 95       	ror	r24
 54a:	77 95       	ror	r23
 54c:	67 95       	ror	r22
 54e:	b7 95       	ror	r27
 550:	f7 95       	ror	r31
 552:	9e 3f       	cpi	r25, 0xFE	; 254
 554:	08 f0       	brcs	.+2      	; 0x558 <__addsf3x+0x9a>
 556:	b0 cf       	rjmp	.-160    	; 0x4b8 <__addsf3+0x28>
 558:	93 95       	inc	r25
 55a:	88 0f       	add	r24, r24
 55c:	08 f0       	brcs	.+2      	; 0x560 <__addsf3x+0xa2>
 55e:	99 27       	eor	r25, r25
 560:	ee 0f       	add	r30, r30
 562:	97 95       	ror	r25
 564:	87 95       	ror	r24
 566:	08 95       	ret

00000568 <__floatunsisf>:
 568:	e8 94       	clt
 56a:	09 c0       	rjmp	.+18     	; 0x57e <__floatsisf+0x12>

0000056c <__floatsisf>:
 56c:	97 fb       	bst	r25, 7
 56e:	3e f4       	brtc	.+14     	; 0x57e <__floatsisf+0x12>
 570:	90 95       	com	r25
 572:	80 95       	com	r24
 574:	70 95       	com	r23
 576:	61 95       	neg	r22
 578:	7f 4f       	sbci	r23, 0xFF	; 255
 57a:	8f 4f       	sbci	r24, 0xFF	; 255
 57c:	9f 4f       	sbci	r25, 0xFF	; 255
 57e:	99 23       	and	r25, r25
 580:	a9 f0       	breq	.+42     	; 0x5ac <__floatsisf+0x40>
 582:	f9 2f       	mov	r31, r25
 584:	96 e9       	ldi	r25, 0x96	; 150
 586:	bb 27       	eor	r27, r27
 588:	93 95       	inc	r25
 58a:	f6 95       	lsr	r31
 58c:	87 95       	ror	r24
 58e:	77 95       	ror	r23
 590:	67 95       	ror	r22
 592:	b7 95       	ror	r27
 594:	f1 11       	cpse	r31, r1
 596:	f8 cf       	rjmp	.-16     	; 0x588 <__floatsisf+0x1c>
 598:	fa f4       	brpl	.+62     	; 0x5d8 <__floatsisf+0x6c>
 59a:	bb 0f       	add	r27, r27
 59c:	11 f4       	brne	.+4      	; 0x5a2 <__floatsisf+0x36>
 59e:	60 ff       	sbrs	r22, 0
 5a0:	1b c0       	rjmp	.+54     	; 0x5d8 <__floatsisf+0x6c>
 5a2:	6f 5f       	subi	r22, 0xFF	; 255
 5a4:	7f 4f       	sbci	r23, 0xFF	; 255
 5a6:	8f 4f       	sbci	r24, 0xFF	; 255
 5a8:	9f 4f       	sbci	r25, 0xFF	; 255
 5aa:	16 c0       	rjmp	.+44     	; 0x5d8 <__floatsisf+0x6c>
 5ac:	88 23       	and	r24, r24
 5ae:	11 f0       	breq	.+4      	; 0x5b4 <__floatsisf+0x48>
 5b0:	96 e9       	ldi	r25, 0x96	; 150
 5b2:	11 c0       	rjmp	.+34     	; 0x5d6 <__floatsisf+0x6a>
 5b4:	77 23       	and	r23, r23
 5b6:	21 f0       	breq	.+8      	; 0x5c0 <__floatsisf+0x54>
 5b8:	9e e8       	ldi	r25, 0x8E	; 142
 5ba:	87 2f       	mov	r24, r23
 5bc:	76 2f       	mov	r23, r22
 5be:	05 c0       	rjmp	.+10     	; 0x5ca <__floatsisf+0x5e>
 5c0:	66 23       	and	r22, r22
 5c2:	71 f0       	breq	.+28     	; 0x5e0 <__floatsisf+0x74>
 5c4:	96 e8       	ldi	r25, 0x86	; 134
 5c6:	86 2f       	mov	r24, r22
 5c8:	70 e0       	ldi	r23, 0x00	; 0
 5ca:	60 e0       	ldi	r22, 0x00	; 0
 5cc:	2a f0       	brmi	.+10     	; 0x5d8 <__floatsisf+0x6c>
 5ce:	9a 95       	dec	r25
 5d0:	66 0f       	add	r22, r22
 5d2:	77 1f       	adc	r23, r23
 5d4:	88 1f       	adc	r24, r24
 5d6:	da f7       	brpl	.-10     	; 0x5ce <__floatsisf+0x62>
 5d8:	88 0f       	add	r24, r24
 5da:	96 95       	lsr	r25
 5dc:	87 95       	ror	r24
 5de:	97 f9       	bld	r25, 7
 5e0:	08 95       	ret

000005e2 <__fp_inf>:
 5e2:	97 f9       	bld	r25, 7
 5e4:	9f 67       	ori	r25, 0x7F	; 127
 5e6:	80 e8       	ldi	r24, 0x80	; 128
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	08 95       	ret

000005ee <__fp_nan>:
 5ee:	9f ef       	ldi	r25, 0xFF	; 255
 5f0:	80 ec       	ldi	r24, 0xC0	; 192
 5f2:	08 95       	ret

000005f4 <__fp_pscA>:
 5f4:	00 24       	eor	r0, r0
 5f6:	0a 94       	dec	r0
 5f8:	16 16       	cp	r1, r22
 5fa:	17 06       	cpc	r1, r23
 5fc:	18 06       	cpc	r1, r24
 5fe:	09 06       	cpc	r0, r25
 600:	08 95       	ret

00000602 <__fp_pscB>:
 602:	00 24       	eor	r0, r0
 604:	0a 94       	dec	r0
 606:	12 16       	cp	r1, r18
 608:	13 06       	cpc	r1, r19
 60a:	14 06       	cpc	r1, r20
 60c:	05 06       	cpc	r0, r21
 60e:	08 95       	ret

00000610 <__fp_round>:
 610:	09 2e       	mov	r0, r25
 612:	03 94       	inc	r0
 614:	00 0c       	add	r0, r0
 616:	11 f4       	brne	.+4      	; 0x61c <__fp_round+0xc>
 618:	88 23       	and	r24, r24
 61a:	52 f0       	brmi	.+20     	; 0x630 <__fp_round+0x20>
 61c:	bb 0f       	add	r27, r27
 61e:	40 f4       	brcc	.+16     	; 0x630 <__fp_round+0x20>
 620:	bf 2b       	or	r27, r31
 622:	11 f4       	brne	.+4      	; 0x628 <__fp_round+0x18>
 624:	60 ff       	sbrs	r22, 0
 626:	04 c0       	rjmp	.+8      	; 0x630 <__fp_round+0x20>
 628:	6f 5f       	subi	r22, 0xFF	; 255
 62a:	7f 4f       	sbci	r23, 0xFF	; 255
 62c:	8f 4f       	sbci	r24, 0xFF	; 255
 62e:	9f 4f       	sbci	r25, 0xFF	; 255
 630:	08 95       	ret

00000632 <__fp_split3>:
 632:	57 fd       	sbrc	r21, 7
 634:	90 58       	subi	r25, 0x80	; 128
 636:	44 0f       	add	r20, r20
 638:	55 1f       	adc	r21, r21
 63a:	59 f0       	breq	.+22     	; 0x652 <__fp_splitA+0x10>
 63c:	5f 3f       	cpi	r21, 0xFF	; 255
 63e:	71 f0       	breq	.+28     	; 0x65c <__fp_splitA+0x1a>
 640:	47 95       	ror	r20

00000642 <__fp_splitA>:
 642:	88 0f       	add	r24, r24
 644:	97 fb       	bst	r25, 7
 646:	99 1f       	adc	r25, r25
 648:	61 f0       	breq	.+24     	; 0x662 <__fp_splitA+0x20>
 64a:	9f 3f       	cpi	r25, 0xFF	; 255
 64c:	79 f0       	breq	.+30     	; 0x66c <__fp_splitA+0x2a>
 64e:	87 95       	ror	r24
 650:	08 95       	ret
 652:	12 16       	cp	r1, r18
 654:	13 06       	cpc	r1, r19
 656:	14 06       	cpc	r1, r20
 658:	55 1f       	adc	r21, r21
 65a:	f2 cf       	rjmp	.-28     	; 0x640 <__fp_split3+0xe>
 65c:	46 95       	lsr	r20
 65e:	f1 df       	rcall	.-30     	; 0x642 <__fp_splitA>
 660:	08 c0       	rjmp	.+16     	; 0x672 <__fp_splitA+0x30>
 662:	16 16       	cp	r1, r22
 664:	17 06       	cpc	r1, r23
 666:	18 06       	cpc	r1, r24
 668:	99 1f       	adc	r25, r25
 66a:	f1 cf       	rjmp	.-30     	; 0x64e <__fp_splitA+0xc>
 66c:	86 95       	lsr	r24
 66e:	71 05       	cpc	r23, r1
 670:	61 05       	cpc	r22, r1
 672:	08 94       	sec
 674:	08 95       	ret

00000676 <__fp_zero>:
 676:	e8 94       	clt

00000678 <__fp_szero>:
 678:	bb 27       	eor	r27, r27
 67a:	66 27       	eor	r22, r22
 67c:	77 27       	eor	r23, r23
 67e:	cb 01       	movw	r24, r22
 680:	97 f9       	bld	r25, 7
 682:	08 95       	ret

00000684 <__mulsf3>:
 684:	0e 94 55 03 	call	0x6aa	; 0x6aa <__mulsf3x>
 688:	0c 94 08 03 	jmp	0x610	; 0x610 <__fp_round>
 68c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__fp_pscA>
 690:	38 f0       	brcs	.+14     	; 0x6a0 <__mulsf3+0x1c>
 692:	0e 94 01 03 	call	0x602	; 0x602 <__fp_pscB>
 696:	20 f0       	brcs	.+8      	; 0x6a0 <__mulsf3+0x1c>
 698:	95 23       	and	r25, r21
 69a:	11 f0       	breq	.+4      	; 0x6a0 <__mulsf3+0x1c>
 69c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__fp_inf>
 6a0:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__fp_nan>
 6a4:	11 24       	eor	r1, r1
 6a6:	0c 94 3c 03 	jmp	0x678	; 0x678 <__fp_szero>

000006aa <__mulsf3x>:
 6aa:	0e 94 19 03 	call	0x632	; 0x632 <__fp_split3>
 6ae:	70 f3       	brcs	.-36     	; 0x68c <__mulsf3+0x8>

000006b0 <__mulsf3_pse>:
 6b0:	95 9f       	mul	r25, r21
 6b2:	c1 f3       	breq	.-16     	; 0x6a4 <__mulsf3+0x20>
 6b4:	95 0f       	add	r25, r21
 6b6:	50 e0       	ldi	r21, 0x00	; 0
 6b8:	55 1f       	adc	r21, r21
 6ba:	62 9f       	mul	r22, r18
 6bc:	f0 01       	movw	r30, r0
 6be:	72 9f       	mul	r23, r18
 6c0:	bb 27       	eor	r27, r27
 6c2:	f0 0d       	add	r31, r0
 6c4:	b1 1d       	adc	r27, r1
 6c6:	63 9f       	mul	r22, r19
 6c8:	aa 27       	eor	r26, r26
 6ca:	f0 0d       	add	r31, r0
 6cc:	b1 1d       	adc	r27, r1
 6ce:	aa 1f       	adc	r26, r26
 6d0:	64 9f       	mul	r22, r20
 6d2:	66 27       	eor	r22, r22
 6d4:	b0 0d       	add	r27, r0
 6d6:	a1 1d       	adc	r26, r1
 6d8:	66 1f       	adc	r22, r22
 6da:	82 9f       	mul	r24, r18
 6dc:	22 27       	eor	r18, r18
 6de:	b0 0d       	add	r27, r0
 6e0:	a1 1d       	adc	r26, r1
 6e2:	62 1f       	adc	r22, r18
 6e4:	73 9f       	mul	r23, r19
 6e6:	b0 0d       	add	r27, r0
 6e8:	a1 1d       	adc	r26, r1
 6ea:	62 1f       	adc	r22, r18
 6ec:	83 9f       	mul	r24, r19
 6ee:	a0 0d       	add	r26, r0
 6f0:	61 1d       	adc	r22, r1
 6f2:	22 1f       	adc	r18, r18
 6f4:	74 9f       	mul	r23, r20
 6f6:	33 27       	eor	r19, r19
 6f8:	a0 0d       	add	r26, r0
 6fa:	61 1d       	adc	r22, r1
 6fc:	23 1f       	adc	r18, r19
 6fe:	84 9f       	mul	r24, r20
 700:	60 0d       	add	r22, r0
 702:	21 1d       	adc	r18, r1
 704:	82 2f       	mov	r24, r18
 706:	76 2f       	mov	r23, r22
 708:	6a 2f       	mov	r22, r26
 70a:	11 24       	eor	r1, r1
 70c:	9f 57       	subi	r25, 0x7F	; 127
 70e:	50 40       	sbci	r21, 0x00	; 0
 710:	9a f0       	brmi	.+38     	; 0x738 <__mulsf3_pse+0x88>
 712:	f1 f0       	breq	.+60     	; 0x750 <__mulsf3_pse+0xa0>
 714:	88 23       	and	r24, r24
 716:	4a f0       	brmi	.+18     	; 0x72a <__mulsf3_pse+0x7a>
 718:	ee 0f       	add	r30, r30
 71a:	ff 1f       	adc	r31, r31
 71c:	bb 1f       	adc	r27, r27
 71e:	66 1f       	adc	r22, r22
 720:	77 1f       	adc	r23, r23
 722:	88 1f       	adc	r24, r24
 724:	91 50       	subi	r25, 0x01	; 1
 726:	50 40       	sbci	r21, 0x00	; 0
 728:	a9 f7       	brne	.-22     	; 0x714 <__mulsf3_pse+0x64>
 72a:	9e 3f       	cpi	r25, 0xFE	; 254
 72c:	51 05       	cpc	r21, r1
 72e:	80 f0       	brcs	.+32     	; 0x750 <__mulsf3_pse+0xa0>
 730:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__fp_inf>
 734:	0c 94 3c 03 	jmp	0x678	; 0x678 <__fp_szero>
 738:	5f 3f       	cpi	r21, 0xFF	; 255
 73a:	e4 f3       	brlt	.-8      	; 0x734 <__mulsf3_pse+0x84>
 73c:	98 3e       	cpi	r25, 0xE8	; 232
 73e:	d4 f3       	brlt	.-12     	; 0x734 <__mulsf3_pse+0x84>
 740:	86 95       	lsr	r24
 742:	77 95       	ror	r23
 744:	67 95       	ror	r22
 746:	b7 95       	ror	r27
 748:	f7 95       	ror	r31
 74a:	e7 95       	ror	r30
 74c:	9f 5f       	subi	r25, 0xFF	; 255
 74e:	c1 f7       	brne	.-16     	; 0x740 <__mulsf3_pse+0x90>
 750:	fe 2b       	or	r31, r30
 752:	88 0f       	add	r24, r24
 754:	91 1d       	adc	r25, r1
 756:	96 95       	lsr	r25
 758:	87 95       	ror	r24
 75a:	97 f9       	bld	r25, 7
 75c:	08 95       	ret

0000075e <_exit>:
 75e:	f8 94       	cli

00000760 <__stop_program>:
 760:	ff cf       	rjmp	.-2      	; 0x760 <__stop_program>
