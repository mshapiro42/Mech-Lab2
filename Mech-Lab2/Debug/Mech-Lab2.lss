
Mech-Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000270  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f54  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000911  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000793  00000000  00000000  00001cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000220  00000000  00000000  00002444  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ae  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000735  00000000  00000000  00002c12  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00003347  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  9e:	0c 94 36 01 	jmp	0x26c	; 0x26c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  ba:	08 95       	ret

000000bc <print_byte>:
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	95 ff       	sbrs	r25, 5
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <print_byte+0x4>
  c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  ca:	08 95       	ret

000000cc <print_float>:
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	00 d0       	rcall	.+0      	; 0xda <print_float+0xe>
  da:	00 d0       	rcall	.+0      	; 0xdc <print_float+0x10>
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
  e0:	69 83       	std	Y+1, r22	; 0x01
  e2:	7a 83       	std	Y+2, r23	; 0x02
  e4:	8b 83       	std	Y+3, r24	; 0x03
  e6:	9c 83       	std	Y+4, r25	; 0x04
  e8:	8e 01       	movw	r16, r28
  ea:	0f 5f       	subi	r16, 0xFF	; 255
  ec:	1f 4f       	sbci	r17, 0xFF	; 255
  ee:	7e 01       	movw	r14, r28
  f0:	85 e0       	ldi	r24, 0x05	; 5
  f2:	e8 0e       	add	r14, r24
  f4:	f1 1c       	adc	r15, r1
  f6:	f8 01       	movw	r30, r16
  f8:	81 91       	ld	r24, Z+
  fa:	8f 01       	movw	r16, r30
  fc:	0e 94 5e 00 	call	0xbc	; 0xbc <print_byte>
 100:	0e 15       	cp	r16, r14
 102:	1f 05       	cpc	r17, r15
 104:	c1 f7       	brne	.-16     	; 0xf6 <print_float+0x2a>
 106:	0f 90       	pop	r0
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	0f 90       	pop	r0
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
 114:	0f 91       	pop	r16
 116:	ff 90       	pop	r15
 118:	ef 90       	pop	r14
 11a:	08 95       	ret

0000011c <timer0_init>:
}

void timer0_init()
{	
	// enable CTC for Timer0
	TCCR0A |= (1 << WGM01);
 11c:	84 b5       	in	r24, 0x24	; 36
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	84 bd       	out	0x24, r24	; 36
	// enable prescaler of 1024 for Timer0
	TCCR0B |= (1 << CS02)|(1 << CS00);
 122:	85 b5       	in	r24, 0x25	; 37
 124:	85 60       	ori	r24, 0x05	; 5
 126:	85 bd       	out	0x25, r24	; 37
	
	// initialize counter to zero
	TCNT0 = 0;
 128:	16 bc       	out	0x26, r1	; 38
	
	// initialize compare value for CTC
	OCR0A = 155;
 12a:	8b e9       	ldi	r24, 0x9B	; 155
 12c:	87 bd       	out	0x27, r24	; 39
 12e:	08 95       	ret

00000130 <timer1_init>:
}

void timer1_init()
{
	TCCR1A |= 0;
 130:	e0 e8       	ldi	r30, 0x80	; 128
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 83       	st	Z, r24
	// Enable CTC for Timer1 with no prescaler
	TCCR1B |= (1 << WGM12)|(1 << CS10);
 138:	e1 e8       	ldi	r30, 0x81	; 129
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	89 60       	ori	r24, 0x09	; 9
 140:	80 83       	st	Z, r24
	//TCCR1B |= (1 << WGM12)|(1 << CS12)|(1 << CS10);
	// initialize counter to zero
	TCNT1 = 0;
 142:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 146:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	
	// initialize compare value
	OCR1B = 15999;
 14a:	8f e7       	ldi	r24, 0x7F	; 127
 14c:	9e e3       	ldi	r25, 0x3E	; 62
 14e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 152:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 156:	08 95       	ret

00000158 <adc_init>:

void adc_init() {
	
	//Set reference to built in channels, set MUX to ADC1 to read from AI1
	//ADMUX = (1<<REFS0)|(1<<MUX0);
	ADMUX = (1<<REFS0);
 158:	80 e4       	ldi	r24, 0x40	; 64
 15a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	//Enable ADC w/ auto-trigger
	//ADCSRA = (1<<ADEN)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
	ADCSRA = (1<<ADEN);
 15e:	80 e8       	ldi	r24, 0x80	; 128
 160:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 164:	08 95       	ret

00000166 <adc_read>:

uint16_t adc_read(uint8_t ch)
{
	//select channel to read
	ch &= 0b00000111;
	ADMUX = (ADMUX & 0xF8)|ch;
 166:	ec e7       	ldi	r30, 0x7C	; 124
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	90 81       	ld	r25, Z
 16c:	98 7f       	andi	r25, 0xF8	; 248
 16e:	87 70       	andi	r24, 0x07	; 7
 170:	89 2b       	or	r24, r25
 172:	80 83       	st	Z, r24
	
	//start conversion
	ADCSRA |= (1<<ADSC);
 174:	ea e7       	ldi	r30, 0x7A	; 122
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	80 64       	ori	r24, 0x40	; 64
 17c:	80 83       	st	Z, r24
	
	//wait for conversion to complete
	while(ADCSRA & (1<<ADSC));
 17e:	80 81       	ld	r24, Z
 180:	86 fd       	sbrc	r24, 6
 182:	fd cf       	rjmp	.-6      	; 0x17e <adc_read+0x18>
	
	//return result
	return (ADC);
 184:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 188:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 18c:	08 95       	ret

0000018e <main>:
void timer1_init();
void adc_init();
uint16_t adc_read(uint8_t ch);

int main(void)
{
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	c4 54       	subi	r28, 0x44	; 68
 198:	d1 09       	sbc	r29, r1
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	f8 94       	cli
 19e:	de bf       	out	0x3e, r29	; 62
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	cd bf       	out	0x3d, r28	; 61
	struct Ring_Buffer_F input_queue;
	struct Ring_Buffer_F output_queue;
	USART_Init(MYUBRR);
 1a4:	87 e6       	ldi	r24, 0x67	; 103
 1a6:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	rb_initialize_F(&input_queue);
 1aa:	ce 01       	movw	r24, r28
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	0e 94 f5 00 	call	0x1ea	; 0x1ea <rb_initialize_F>
    rb_initialize_F(&output_queue);
 1b2:	ce 01       	movw	r24, r28
 1b4:	83 96       	adiw	r24, 0x23	; 35
 1b6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <rb_initialize_F>

	timer0_init();
 1ba:	0e 94 8e 00 	call	0x11c	; 0x11c <timer0_init>
	timer1_init();
 1be:	0e 94 98 00 	call	0x130	; 0x130 <timer1_init>
	adc_init();
 1c2:	0e 94 ac 00 	call	0x158	; 0x158 <adc_init>
	
	//Set AI0 to Output and rest as Input
	DDRC |= 0b00000001;
 1c6:	38 9a       	sbi	0x07, 0	; 7
	
	//Set output to 1 to power sensor
	PORTC |= 0b00000001;
 1c8:	40 9a       	sbi	0x08, 0	; 8

    while (1) 
    {
		//print_byte('.');
		//if TIMER0_flag
		if((TIFR0 & (1 << OCF0A)))
 1ca:	a9 99       	sbic	0x15, 1	; 21
			//print_float(output);
			
			//print_float(400);
			//print_byte('a');
			//reset TIMER0_flag
			TIFR0 |= (1 << OCF0A);
 1cc:	a9 9a       	sbi	0x15, 1	; 21
		}
		//if TIMER1_flag
		if((TIFR1 & (1 << OCF1B)))
 1ce:	b2 9b       	sbis	0x16, 2	; 22
 1d0:	fc cf       	rjmp	.-8      	; 0x1ca <main+0x3c>
			//ADCSRA |= (1<<ADSC);
			// wait until conversion is complete
			//while(ADCSRA &(1<<ADSC));
			//collect input
			//volt = (ADCH<<8) + (ADCL);
			volt = adc_read(1);
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 b3 00 	call	0x166	; 0x166 <adc_read>
			
			print_float(volt);
 1d8:	bc 01       	movw	r22, r24
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <__floatunsisf>
 1e2:	0e 94 66 00 	call	0xcc	; 0xcc <print_float>
			//rb_push_back_F(&output_queue, angVel);

			
			
			//reset TIMER1_flag
			TIFR1 |= (1 << OCF1A);
 1e6:	b1 9a       	sbi	0x16, 1	; 22
 1e8:	f0 cf       	rjmp	.-32     	; 0x1ca <main+0x3c>

000001ea <rb_initialize_F>:
/* Initialization */
void rb_initialize_F( struct Ring_Buffer_F* p_buf )
{
    // set start and end indicies to 0
    // no point changing data
    p_buf->start_index = 0;
 1ea:	fc 01       	movw	r30, r24
 1ec:	10 a2       	std	Z+32, r1	; 0x20
    p_buf->end_index = 0;
 1ee:	11 a2       	std	Z+33, r1	; 0x21
 1f0:	08 95       	ret

000001f2 <__floatunsisf>:
 1f2:	e8 94       	clt
 1f4:	09 c0       	rjmp	.+18     	; 0x208 <__floatsisf+0x12>

000001f6 <__floatsisf>:
 1f6:	97 fb       	bst	r25, 7
 1f8:	3e f4       	brtc	.+14     	; 0x208 <__floatsisf+0x12>
 1fa:	90 95       	com	r25
 1fc:	80 95       	com	r24
 1fe:	70 95       	com	r23
 200:	61 95       	neg	r22
 202:	7f 4f       	sbci	r23, 0xFF	; 255
 204:	8f 4f       	sbci	r24, 0xFF	; 255
 206:	9f 4f       	sbci	r25, 0xFF	; 255
 208:	99 23       	and	r25, r25
 20a:	a9 f0       	breq	.+42     	; 0x236 <__floatsisf+0x40>
 20c:	f9 2f       	mov	r31, r25
 20e:	96 e9       	ldi	r25, 0x96	; 150
 210:	bb 27       	eor	r27, r27
 212:	93 95       	inc	r25
 214:	f6 95       	lsr	r31
 216:	87 95       	ror	r24
 218:	77 95       	ror	r23
 21a:	67 95       	ror	r22
 21c:	b7 95       	ror	r27
 21e:	f1 11       	cpse	r31, r1
 220:	f8 cf       	rjmp	.-16     	; 0x212 <__floatsisf+0x1c>
 222:	fa f4       	brpl	.+62     	; 0x262 <__floatsisf+0x6c>
 224:	bb 0f       	add	r27, r27
 226:	11 f4       	brne	.+4      	; 0x22c <__floatsisf+0x36>
 228:	60 ff       	sbrs	r22, 0
 22a:	1b c0       	rjmp	.+54     	; 0x262 <__floatsisf+0x6c>
 22c:	6f 5f       	subi	r22, 0xFF	; 255
 22e:	7f 4f       	sbci	r23, 0xFF	; 255
 230:	8f 4f       	sbci	r24, 0xFF	; 255
 232:	9f 4f       	sbci	r25, 0xFF	; 255
 234:	16 c0       	rjmp	.+44     	; 0x262 <__floatsisf+0x6c>
 236:	88 23       	and	r24, r24
 238:	11 f0       	breq	.+4      	; 0x23e <__floatsisf+0x48>
 23a:	96 e9       	ldi	r25, 0x96	; 150
 23c:	11 c0       	rjmp	.+34     	; 0x260 <__floatsisf+0x6a>
 23e:	77 23       	and	r23, r23
 240:	21 f0       	breq	.+8      	; 0x24a <__floatsisf+0x54>
 242:	9e e8       	ldi	r25, 0x8E	; 142
 244:	87 2f       	mov	r24, r23
 246:	76 2f       	mov	r23, r22
 248:	05 c0       	rjmp	.+10     	; 0x254 <__floatsisf+0x5e>
 24a:	66 23       	and	r22, r22
 24c:	71 f0       	breq	.+28     	; 0x26a <__floatsisf+0x74>
 24e:	96 e8       	ldi	r25, 0x86	; 134
 250:	86 2f       	mov	r24, r22
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	2a f0       	brmi	.+10     	; 0x262 <__floatsisf+0x6c>
 258:	9a 95       	dec	r25
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	88 1f       	adc	r24, r24
 260:	da f7       	brpl	.-10     	; 0x258 <__floatsisf+0x62>
 262:	88 0f       	add	r24, r24
 264:	96 95       	lsr	r25
 266:	87 95       	ror	r24
 268:	97 f9       	bld	r25, 7
 26a:	08 95       	ret

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
