
Mech-Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001006  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000974  00000000  00000000  000013d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000751  00000000  00000000  00001d46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  00002498  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000056e  00000000  00000000  000026a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000069f  00000000  00000000  00002c16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  000032b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  8e:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <USART_Init>:
	for(uint8_t i = 0; i < 4; i++){ //for 4 bytes
		while(!(newMsg)); //wait for new byte
		a.asChar[i] = receive_byte(); //collect byte
	}
	return a.asFloat; //return float value
}
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  9a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  9e:	88 e1       	ldi	r24, 0x18	; 24
  a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  aa:	08 95       	ret

000000ac <print_byte>:
uint8_t newMsg() {
	return UCSR0A & (1<<RXC0);
}

uint8_t transmitReady(){
	return UCSR0A & (1<<UDRE0);
  ac:	e0 ec       	ldi	r30, 0xC0	; 192
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	90 81       	ld	r25, Z
	return a.asFloat; //return float value
}


void print_byte(uint8_t value){
	while(!(transmitReady())); //after transmit line is ready
  b2:	95 ff       	sbrs	r25, 5
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <print_byte+0x4>
	UDR0 = value; //set transmit register to value
  b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  ba:	08 95       	ret

000000bc <print_float>:
}

void print_float(float value){ 
  bc:	ef 92       	push	r14
  be:	ff 92       	push	r15
  c0:	0f 93       	push	r16
  c2:	1f 93       	push	r17
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	00 d0       	rcall	.+0      	; 0xca <print_float+0xe>
  ca:	00 d0       	rcall	.+0      	; 0xcc <print_float+0x10>
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	union floatChars b; //create helper union instance
	b.asFloat = value; //set float value
  d0:	69 83       	std	Y+1, r22	; 0x01
  d2:	7a 83       	std	Y+2, r23	; 0x02
  d4:	8b 83       	std	Y+3, r24	; 0x03
  d6:	9c 83       	std	Y+4, r25	; 0x04
  d8:	8e 01       	movw	r16, r28
  da:	0f 5f       	subi	r16, 0xFF	; 255
  dc:	1f 4f       	sbci	r17, 0xFF	; 255
  de:	7e 01       	movw	r14, r28
  e0:	85 e0       	ldi	r24, 0x05	; 5
  e2:	e8 0e       	add	r14, r24
  e4:	f1 1c       	adc	r15, r1
	for(uint8_t i = 0; i < 4; i++){ //for 4 bytes
		print_byte(b.asChar[i]); //send each byte
  e6:	f8 01       	movw	r30, r16
  e8:	81 91       	ld	r24, Z+
  ea:	8f 01       	movw	r16, r30
  ec:	0e 94 56 00 	call	0xac	; 0xac <print_byte>
}

void print_float(float value){ 
	union floatChars b; //create helper union instance
	b.asFloat = value; //set float value
	for(uint8_t i = 0; i < 4; i++){ //for 4 bytes
  f0:	0e 15       	cp	r16, r14
  f2:	1f 05       	cpc	r17, r15
  f4:	c1 f7       	brne	.-16     	; 0xe6 <print_float+0x2a>
		print_byte(b.asChar[i]); //send each byte
	}
}
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	0f 90       	pop	r0
  fc:	0f 90       	pop	r0
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	1f 91       	pop	r17
 104:	0f 91       	pop	r16
 106:	ff 90       	pop	r15
 108:	ef 90       	pop	r14
 10a:	08 95       	ret

0000010c <main>:
#include "Dig_Filter.h"



int main(void)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
 114:	c4 54       	subi	r28, 0x44	; 68
 116:	d1 09       	sbc	r29, r1
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
	struct Ring_Buffer_F input_queue;
	struct Ring_Buffer_F output_queue;
	USART_Init(MYUBRR);
 122:	87 e6       	ldi	r24, 0x67	; 103
 124:	0e 94 4b 00 	call	0x96	; 0x96 <USART_Init>
	rb_initialize_F(&input_queue);
 128:	ce 01       	movw	r24, r28
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	0e 94 b8 00 	call	0x170	; 0x170 <rb_initialize_F>
    rb_initialize_F(&output_queue);
 130:	ce 01       	movw	r24, r28
 132:	83 96       	adiw	r24, 0x23	; 35
 134:	0e 94 b8 00 	call	0x170	; 0x170 <rb_initialize_F>
	void timer0_init();
	void timer1_init();
	
	//Set AI0 to Output and rest as Input
	DDRC = 0b10000000;
 138:	80 e8       	ldi	r24, 0x80	; 128
 13a:	87 b9       	out	0x07, r24	; 7
	//Set output to 1 to power sensor
	PORTC = 0b10000000;
 13c:	88 b9       	out	0x08, r24	; 8
	
	/* Replace with your application code */
    while (1) 
    {
		//if TIMER0_flag
		if(TIFR0 & (1 << OCF0A))
 13e:	a9 9b       	sbis	0x15, 1	; 21
 140:	07 c0       	rjmp	.+14     	; 0x150 <main+0x44>
		{
			//dequeue output
			float output = rb_pop_front_F(&output_queue);
 142:	ce 01       	movw	r24, r28
 144:	83 96       	adiw	r24, 0x23	; 35
 146:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <rb_pop_front_F>
			//print_float
			print_float(output);
 14a:	0e 94 5e 00 	call	0xbc	; 0xbc <print_float>
			//reset TIMER0_flag
			TIFR0 |= (1 << OCF0A);
 14e:	a9 9a       	sbi	0x15, 1	; 21
		}
		//if TIMER1_flag
		if(TIFR1 & (1 << OCF1A))
 150:	b1 9b       	sbis	0x16, 1	; 22
 152:	f5 cf       	rjmp	.-22     	; 0x13e <main+0x32>
			//collect input
			float volt = PINC1;
			//convert to position
			float angPos = volt; //add equation to covert
			//convert to velocity
			float angVel = (angPos - rb_pop_front_F(&input_queue))*sampPer;
 154:	ce 01       	movw	r24, r28
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <rb_pop_front_F>
			//add angPos to queue
			rb_push_back_F(&input_queue,angPos);
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	60 e8       	ldi	r22, 0x80	; 128
 162:	7f e3       	ldi	r23, 0x3F	; 63
 164:	ce 01       	movw	r24, r28
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	0e 94 bc 00 	call	0x178	; 0x178 <rb_push_back_F>
			//filter velocity
			//add to output queue
			//reset TIMER1_flag
			TIFR1 |= (1 << OCF1A);
 16c:	b1 9a       	sbi	0x16, 1	; 22
 16e:	e7 cf       	rjmp	.-50     	; 0x13e <main+0x32>

00000170 <rb_initialize_F>:
    } 
    else {
        return 0;
    }
   
}
 170:	fc 01       	movw	r30, r24
 172:	10 a2       	std	Z+32, r1	; 0x20
 174:	11 a2       	std	Z+33, r1	; 0x21
 176:	08 95       	ret

00000178 <rb_push_back_F>:
 178:	fc 01       	movw	r30, r24
 17a:	91 a1       	ldd	r25, Z+33	; 0x21
 17c:	df 01       	movw	r26, r30
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	98 9f       	mul	r25, r24
 182:	a0 0d       	add	r26, r0
 184:	b1 1d       	adc	r27, r1
 186:	11 24       	eor	r1, r1
 188:	4d 93       	st	X+, r20
 18a:	5d 93       	st	X+, r21
 18c:	6d 93       	st	X+, r22
 18e:	7c 93       	st	X, r23
 190:	13 97       	sbiw	r26, 0x03	; 3
 192:	9f 5f       	subi	r25, 0xFF	; 255
 194:	97 70       	andi	r25, 0x07	; 7
 196:	91 a3       	std	Z+33, r25	; 0x21
 198:	80 a1       	ldd	r24, Z+32	; 0x20
 19a:	98 13       	cpse	r25, r24
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <rb_push_back_F+0x2c>
 19e:	9f 5f       	subi	r25, 0xFF	; 255
 1a0:	97 70       	andi	r25, 0x07	; 7
 1a2:	90 a3       	std	Z+32, r25	; 0x20
 1a4:	08 95       	ret

000001a6 <rb_pop_front_F>:

/* Remove element from start and shorten */
float rb_pop_front_F( struct Ring_Buffer_F* p_buf)
{
 1a6:	dc 01       	movw	r26, r24
    // get value to return at front
    // if end does not equal start (length zero),
    //    increase start index by 1 and mask
    // return value
    float value = p_buf->buffer[p_buf->start_index];
 1a8:	90 96       	adiw	r26, 0x20	; 32
 1aa:	9c 91       	ld	r25, X
 1ac:	90 97       	sbiw	r26, 0x20	; 32
 1ae:	e9 2f       	mov	r30, r25
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
    if(p_buf->start_index != p_buf->end_index){
 1b2:	91 96       	adiw	r26, 0x21	; 33
 1b4:	8c 91       	ld	r24, X
 1b6:	91 97       	sbiw	r26, 0x21	; 33
 1b8:	98 17       	cp	r25, r24
 1ba:	79 f0       	breq	.+30     	; 0x1da <rb_pop_front_F+0x34>
{
    // get value to return at front
    // if end does not equal start (length zero),
    //    increase start index by 1 and mask
    // return value
    float value = p_buf->buffer[p_buf->start_index];
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	ea 0f       	add	r30, r26
 1c6:	fb 1f       	adc	r31, r27
 1c8:	50 81       	ld	r21, Z
 1ca:	41 81       	ldd	r20, Z+1	; 0x01
 1cc:	32 81       	ldd	r19, Z+2	; 0x02
 1ce:	23 81       	ldd	r18, Z+3	; 0x03
    if(p_buf->start_index != p_buf->end_index){
        p_buf->start_index = (p_buf->start_index + 1) & RB_MASK_F;
 1d0:	9f 5f       	subi	r25, 0xFF	; 255
 1d2:	97 70       	andi	r25, 0x07	; 7
 1d4:	90 96       	adiw	r26, 0x20	; 32
 1d6:	9c 93       	st	X, r25
        return value; // update
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <rb_pop_front_F+0x3c>
    }
    else {
        return 0;
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	20 e0       	ldi	r18, 0x00	; 0
    }
    
}
 1e2:	65 2f       	mov	r22, r21
 1e4:	74 2f       	mov	r23, r20
 1e6:	83 2f       	mov	r24, r19
 1e8:	92 2f       	mov	r25, r18
 1ea:	08 95       	ret

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
