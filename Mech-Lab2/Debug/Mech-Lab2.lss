
Mech-Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000610  000006a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000610  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  0080011c  0080011c  000006c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013b2  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a99  00000000  00000000  00001c22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000921  00000000  00000000  000026bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  00002fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062a  00000000  00000000  00003250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000985  00000000  00000000  0000387a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000041ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 3a       	cpi	r26, 0xA1	; 161
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  9e:	0c 94 06 03 	jmp	0x60c	; 0x60c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <digital_filter_init>:
float b[5] = {0.018563010626897, 0.074252042507589, 0.111378063761383, 0.074252042507589, 0.018563010626897}; // cutoff frequency was 150
float a[5] = {1.000000000000000,  -1.570398851228171,  1.275613324983279, -0.484403368335085, 0.076197064610332};
uint8_t i;

/* Initialization */
void digital_filter_init(float reading){
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	6b 01       	movw	r12, r22
  b0:	7c 01       	movw	r14, r24
	rb_initialize_F(&inputs);
  b2:	8f e5       	ldi	r24, 0x5F	; 95
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <rb_initialize_F>
	rb_initialize_F(&outputs);
  ba:	8d e1       	ldi	r24, 0x1D	; 29
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0e 94 50 01 	call	0x2a0	; 0x2a0 <rb_initialize_F>
	
	for(i = 0; i <= 7; i++){	
  c2:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
		rb_push_front_F(&inputs, reading);
  c6:	b7 01       	movw	r22, r14
  c8:	a6 01       	movw	r20, r12
  ca:	8f e5       	ldi	r24, 0x5F	; 95
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	0e 94 72 01 	call	0x2e4	; 0x2e4 <rb_push_front_F>
		rb_push_front_F(&outputs, reading);
  d2:	b7 01       	movw	r22, r14
  d4:	a6 01       	movw	r20, r12
  d6:	8d e1       	ldi	r24, 0x1D	; 29
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 72 01 	call	0x2e4	; 0x2e4 <rb_push_front_F>
/* Initialization */
void digital_filter_init(float reading){
	rb_initialize_F(&inputs);
	rb_initialize_F(&outputs);
	
	for(i = 0; i <= 7; i++){	
  de:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
  e8:	88 30       	cpi	r24, 0x08	; 8
  ea:	68 f3       	brcs	.-38     	; 0xc6 <digital_filter_init+0x20>
		rb_push_front_F(&inputs, reading);
		rb_push_front_F(&outputs, reading);
	}
	
	return;
}
  ec:	ff 90       	pop	r15
  ee:	ef 90       	pop	r14
  f0:	df 90       	pop	r13
  f2:	cf 90       	pop	r12
  f4:	08 95       	ret

000000f6 <USART_Init>:
	for(uint8_t i = 0; i < 4; i++){ //for 4 bytes
		while(!(NEW_MSG)); //wait for new byte
		a.asChar[i] = receive_byte(); //collect byte
	}
	return a.asFloat; //return float value
}
  f6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  fe:	88 e1       	ldi	r24, 0x18	; 24
 100:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 104:	86 e0       	ldi	r24, 0x06	; 6
 106:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 10a:	08 95       	ret

0000010c <print_byte>:

void print_byte(uint8_t value){
	//while(!(UCSR0A & (1<<UDRE0)));
	//while(!(TRANSMIT_READY)); //after transmit line is ready
	UDR0 = value; //set transmit register to value
 10c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 110:	08 95       	ret

00000112 <timer0_init>:
}

void timer0_init()
{	
	// enable CTC for Timer0
	TCCR0A |= (1 << WGM01);
 112:	84 b5       	in	r24, 0x24	; 36
 114:	82 60       	ori	r24, 0x02	; 2
 116:	84 bd       	out	0x24, r24	; 36
	// enable prescaler of 1024 for Timer0
	TCCR0B |= (1 << CS02)|(1 << CS00);	
 118:	85 b5       	in	r24, 0x25	; 37
 11a:	85 60       	ori	r24, 0x05	; 5
 11c:	85 bd       	out	0x25, r24	; 37
	// initialize counter to zero
	TCNT0 = 0;	
 11e:	16 bc       	out	0x26, r1	; 38
	// initialize compare value for CTC
	OCR0A = 155;
 120:	8b e9       	ldi	r24, 0x9B	; 155
 122:	87 bd       	out	0x27, r24	; 39
 124:	08 95       	ret

00000126 <timer1_init>:
}

void timer1_init()
{
	TCCR1A |= 0;
 126:	e0 e8       	ldi	r30, 0x80	; 128
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 83       	st	Z, r24
	// Enable CTC for Timer1 with no prescaler
	TCCR1B |= (1 << WGM12)|(1 << CS10);
 12e:	e1 e8       	ldi	r30, 0x81	; 129
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	89 60       	ori	r24, 0x09	; 9
 136:	80 83       	st	Z, r24
	// initialize counter to zero
	TCNT1 = 0;	
 138:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 13c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	// initialize compare value
	OCR1B = 15999;
 140:	8f e7       	ldi	r24, 0x7F	; 127
 142:	9e e3       	ldi	r25, 0x3E	; 62
 144:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 148:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 14c:	08 95       	ret

0000014e <adc_init>:


void adc_init() {
	
	//Set reference to built in channels
	ADMUX = (1<<REFS0);
 14e:	80 e4       	ldi	r24, 0x40	; 64
 150:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	//Enable ADC w/ prescaler
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 154:	87 e8       	ldi	r24, 0x87	; 135
 156:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 15a:	08 95       	ret

0000015c <adc_read>:

uint16_t adc_read(uint8_t ch)
{
	//select channel to read
	ch &= 0b00000111;
	ADMUX = (ADMUX & 0xF8)|ch;	
 15c:	ec e7       	ldi	r30, 0x7C	; 124
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	90 81       	ld	r25, Z
 162:	98 7f       	andi	r25, 0xF8	; 248
 164:	87 70       	andi	r24, 0x07	; 7
 166:	89 2b       	or	r24, r25
 168:	80 83       	st	Z, r24
	//start conversion
	ADCSRA |= (1<<ADSC);	
 16a:	ea e7       	ldi	r30, 0x7A	; 122
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	80 64       	ori	r24, 0x40	; 64
 172:	80 83       	st	Z, r24
	//wait for conversion to complete
	while(ADCSRA & (1<<ADSC));	
 174:	80 81       	ld	r24, Z
 176:	86 fd       	sbrc	r24, 6
 178:	fd cf       	rjmp	.-6      	; 0x174 <adc_read+0x18>
	//return result
	return (ADC);
 17a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 17e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 182:	08 95       	ret

00000184 <main>:
	float asFloat;
	char asChars[4];
};

int main(void)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	aa 97       	sbiw	r28, 0x2a	; 42
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	f8 94       	cli
 192:	de bf       	out	0x3e, r29	; 62
 194:	0f be       	out	0x3f, r0	; 63
 196:	cd bf       	out	0x3d, r28	; 61
	struct Ring_Buffer_C output_queue;
	USART_Init(MYUBRR);
 198:	87 e6       	ldi	r24, 0x67	; 103
 19a:	0e 94 7b 00 	call	0xf6	; 0xf6 <USART_Init>
    rb_initialize_C(&output_queue);
 19e:	ce 01       	movw	r24, r28
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	0e 94 57 01 	call	0x2ae	; 0x2ae <rb_initialize_C>

	timer0_init();
 1a6:	0e 94 89 00 	call	0x112	; 0x112 <timer0_init>
	timer1_init();
 1aa:	0e 94 93 00 	call	0x126	; 0x126 <timer1_init>
	adc_init();
 1ae:	0e 94 a7 00 	call	0x14e	; 0x14e <adc_init>
	digital_filter_init(0);
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	cb 01       	movw	r24, r22
 1b8:	0e 94 53 00 	call	0xa6	; 0xa6 <digital_filter_init>
	
	//Set AI0 to Output and rest as Input
	DDRC |= 0b00000001;
 1bc:	38 9a       	sbi	0x07, 0	; 7
	
	//Set output to 1 to power sensor
	PORTC |= 0b00000001;
 1be:	40 9a       	sbi	0x08, 0	; 8
	float angPos = 0;
	//float angPosLast = 0;
	//float angVel = 0;
	//float filteredVel = 0;
	union floatChars printVal;
	float convertCoeff[] = {-354.5305, 7.2116, -0.0543, 1.9698E-4, -3.5356E-7, 3.0609E-10, -1.0193E-13};
 1c0:	8c e1       	ldi	r24, 0x1C	; 28
 1c2:	e0 e0       	ldi	r30, 0x00	; 0
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	de 01       	movw	r26, r28
 1c8:	1f 96       	adiw	r26, 0x0f	; 15
 1ca:	01 90       	ld	r0, Z+
 1cc:	0d 92       	st	X+, r0
 1ce:	8a 95       	dec	r24
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0x46>
	PORTC |= 0b00000001;
	
	//Sampling frequency for converting to velocity, 1/0.001
	//float sampPer = 1000;
	float volt = 0;
	float angPos = 0;
 1d2:	81 2c       	mov	r8, r1
 1d4:	91 2c       	mov	r9, r1
 1d6:	54 01       	movw	r10, r8
 1d8:	7e 01       	movw	r14, r28
 1da:	8f e0       	ldi	r24, 0x0F	; 15
 1dc:	e8 0e       	add	r14, r24
 1de:	f1 1c       	adc	r15, r1
 1e0:	6e 01       	movw	r12, r28
 1e2:	eb e2       	ldi	r30, 0x2B	; 43
 1e4:	ce 0e       	add	r12, r30
 1e6:	d1 1c       	adc	r13, r1
			//filteredVel = filterValue(angVel);
			
			//reset TIMER1_flag
			TIFR1 |= (1 << OCF1A);
		} 
		if (rb_length_C(&output_queue) > 0 && TRANSMIT_READY){
 1e8:	0f 2e       	mov	r0, r31
 1ea:	f0 ec       	ldi	r31, 0xC0	; 192
 1ec:	2f 2e       	mov	r2, r31
 1ee:	31 2c       	mov	r3, r1
 1f0:	f0 2d       	mov	r31, r0
	float tempSum = convertCoeff[0];

    while (1) 
    {
		//if TIMER0_flag
		if(TIMER0_FLAG)
 1f2:	a9 9b       	sbis	0x15, 1	; 21
 1f4:	12 c0       	rjmp	.+36     	; 0x21a <main+0x96>
		{
			printVal.asFloat = 500; //edit so we don't drop readings during prints
			printVal.asFloat = angPos;
 1f6:	8b 86       	std	Y+11, r8	; 0x0b
 1f8:	9c 86       	std	Y+12, r9	; 0x0c
 1fa:	ad 86       	std	Y+13, r10	; 0x0d
 1fc:	be 86       	std	Y+14, r11	; 0x0e
 1fe:	8e 01       	movw	r16, r28
 200:	05 5f       	subi	r16, 0xF5	; 245
 202:	1f 4f       	sbci	r17, 0xFF	; 255
			for(int i = 0; i < 4; i ++){
				rb_push_back_C(&output_queue, printVal.asChars[i]);
 204:	f8 01       	movw	r30, r16
 206:	61 91       	ld	r22, Z+
 208:	8f 01       	movw	r16, r30
 20a:	ce 01       	movw	r24, r28
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <rb_push_back_C>
		//if TIMER0_flag
		if(TIMER0_FLAG)
		{
			printVal.asFloat = 500; //edit so we don't drop readings during prints
			printVal.asFloat = angPos;
			for(int i = 0; i < 4; i ++){
 212:	0e 15       	cp	r16, r14
 214:	1f 05       	cpc	r17, r15
 216:	b1 f7       	brne	.-20     	; 0x204 <main+0x80>
				rb_push_back_C(&output_queue, printVal.asChars[i]);
			}
			//reset TIMER0_flag
			TIFR0 |= (1 << OCF0A);
 218:	a9 9a       	sbi	0x15, 1	; 21
		}
		//if TIMER1_flag
		if(TIMER1_FLAG)
 21a:	b1 9b       	sbis	0x16, 1	; 22
 21c:	2f c0       	rjmp	.+94     	; 0x27c <main+0xf8>
		{
			//read voltage 
			volt = adc_read(1);	
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	0e 94 ae 00 	call	0x15c	; 0x15c <adc_read>
 224:	bc 01       	movw	r22, r24
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 0b 02 	call	0x416	; 0x416 <__floatunsisf>
 22e:	2b 01       	movw	r4, r22
 230:	3c 01       	movw	r6, r24
			
			//convert to position in radians
			tempSum = convertCoeff[0];
 232:	8f 84       	ldd	r8, Y+15	; 0x0f
 234:	98 88       	ldd	r9, Y+16	; 0x10
 236:	a9 88       	ldd	r10, Y+17	; 0x11
 238:	ba 88       	ldd	r11, Y+18	; 0x12
 23a:	8e 01       	movw	r16, r28
 23c:	0d 5e       	subi	r16, 0xED	; 237
 23e:	1f 4f       	sbci	r17, 0xFF	; 255
			// Apply 6th order best fit line found in Matlab
			for (int i = 1; i <= 6; i++){
				tempSum += convertCoeff[i]*volt;
 240:	f8 01       	movw	r30, r16
 242:	61 91       	ld	r22, Z+
 244:	71 91       	ld	r23, Z+
 246:	81 91       	ld	r24, Z+
 248:	91 91       	ld	r25, Z+
 24a:	8f 01       	movw	r16, r30
 24c:	a3 01       	movw	r20, r6
 24e:	92 01       	movw	r18, r4
 250:	0e 94 99 02 	call	0x532	; 0x532 <__mulsf3>
 254:	9b 01       	movw	r18, r22
 256:	ac 01       	movw	r20, r24
 258:	c5 01       	movw	r24, r10
 25a:	b4 01       	movw	r22, r8
 25c:	0e 94 9f 01 	call	0x33e	; 0x33e <__addsf3>
 260:	4b 01       	movw	r8, r22
 262:	5c 01       	movw	r10, r24
				volt *= volt;
 264:	a3 01       	movw	r20, r6
 266:	92 01       	movw	r18, r4
 268:	c3 01       	movw	r24, r6
 26a:	b2 01       	movw	r22, r4
 26c:	0e 94 99 02 	call	0x532	; 0x532 <__mulsf3>
 270:	2b 01       	movw	r4, r22
 272:	3c 01       	movw	r6, r24
			volt = adc_read(1);	
			
			//convert to position in radians
			tempSum = convertCoeff[0];
			// Apply 6th order best fit line found in Matlab
			for (int i = 1; i <= 6; i++){
 274:	0c 15       	cp	r16, r12
 276:	1d 05       	cpc	r17, r13
 278:	19 f7       	brne	.-58     	; 0x240 <main+0xbc>
			
			//filter velocity
			//filteredVel = filterValue(angVel);
			
			//reset TIMER1_flag
			TIFR1 |= (1 << OCF1A);
 27a:	b1 9a       	sbi	0x16, 1	; 22
		} 
		if (rb_length_C(&output_queue) > 0 && TRANSMIT_READY){
 27c:	ce 01       	movw	r24, r28
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <rb_length_C>
 284:	88 23       	and	r24, r24
 286:	09 f4       	brne	.+2      	; 0x28a <main+0x106>
 288:	b4 cf       	rjmp	.-152    	; 0x1f2 <main+0x6e>
 28a:	f1 01       	movw	r30, r2
 28c:	80 81       	ld	r24, Z
 28e:	85 ff       	sbrs	r24, 5
 290:	b0 cf       	rjmp	.-160    	; 0x1f2 <main+0x6e>
			print_byte(rb_pop_front_C(&output_queue));
 292:	ce 01       	movw	r24, r28
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	0e 94 8d 01 	call	0x31a	; 0x31a <rb_pop_front_C>
 29a:	0e 94 86 00 	call	0x10c	; 0x10c <print_byte>
 29e:	a9 cf       	rjmp	.-174    	; 0x1f2 <main+0x6e>

000002a0 <rb_initialize_F>:
 2a0:	fc 01       	movw	r30, r24
 2a2:	e0 5c       	subi	r30, 0xC0	; 192
 2a4:	ff 4f       	sbci	r31, 0xFF	; 255
 2a6:	10 82       	st	Z, r1
 2a8:	31 96       	adiw	r30, 0x01	; 1
 2aa:	10 82       	st	Z, r1
 2ac:	08 95       	ret

000002ae <rb_initialize_C>:
 2ae:	fc 01       	movw	r30, r24
 2b0:	10 86       	std	Z+8, r1	; 0x08
 2b2:	11 86       	std	Z+9, r1	; 0x09
 2b4:	08 95       	ret

000002b6 <rb_length_C>:
 2b6:	fc 01       	movw	r30, r24
 2b8:	91 85       	ldd	r25, Z+9	; 0x09
 2ba:	80 85       	ldd	r24, Z+8	; 0x08
 2bc:	98 1b       	sub	r25, r24
 2be:	89 2f       	mov	r24, r25
 2c0:	87 70       	andi	r24, 0x07	; 7
 2c2:	08 95       	ret

000002c4 <rb_push_back_C>:
 2c4:	fc 01       	movw	r30, r24
 2c6:	91 85       	ldd	r25, Z+9	; 0x09
 2c8:	df 01       	movw	r26, r30
 2ca:	a9 0f       	add	r26, r25
 2cc:	b1 1d       	adc	r27, r1
 2ce:	6c 93       	st	X, r22
 2d0:	9f 5f       	subi	r25, 0xFF	; 255
 2d2:	97 70       	andi	r25, 0x07	; 7
 2d4:	91 87       	std	Z+9, r25	; 0x09
 2d6:	80 85       	ldd	r24, Z+8	; 0x08
 2d8:	98 13       	cpse	r25, r24
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <rb_push_back_C+0x1e>
 2dc:	9f 5f       	subi	r25, 0xFF	; 255
 2de:	97 70       	andi	r25, 0x07	; 7
 2e0:	90 87       	std	Z+8, r25	; 0x08
 2e2:	08 95       	ret

000002e4 <rb_push_front_F>:
 2e4:	9c 01       	movw	r18, r24
 2e6:	fc 01       	movw	r30, r24
 2e8:	e0 5c       	subi	r30, 0xC0	; 192
 2ea:	ff 4f       	sbci	r31, 0xFF	; 255
 2ec:	90 81       	ld	r25, Z
 2ee:	91 50       	subi	r25, 0x01	; 1
 2f0:	9f 70       	andi	r25, 0x0F	; 15
 2f2:	90 83       	st	Z, r25
 2f4:	31 96       	adiw	r30, 0x01	; 1
 2f6:	80 81       	ld	r24, Z
 2f8:	98 13       	cpse	r25, r24
 2fa:	04 c0       	rjmp	.+8      	; 0x304 <rb_push_front_F+0x20>
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	89 0f       	add	r24, r25
 300:	8f 70       	andi	r24, 0x0F	; 15
 302:	80 83       	st	Z, r24
 304:	f9 01       	movw	r30, r18
 306:	84 e0       	ldi	r24, 0x04	; 4
 308:	98 9f       	mul	r25, r24
 30a:	e0 0d       	add	r30, r0
 30c:	f1 1d       	adc	r31, r1
 30e:	11 24       	eor	r1, r1
 310:	40 83       	st	Z, r20
 312:	51 83       	std	Z+1, r21	; 0x01
 314:	62 83       	std	Z+2, r22	; 0x02
 316:	73 83       	std	Z+3, r23	; 0x03
 318:	08 95       	ret

0000031a <rb_pop_front_C>:
 31a:	fc 01       	movw	r30, r24
 31c:	90 85       	ldd	r25, Z+8	; 0x08
 31e:	29 2f       	mov	r18, r25
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	81 85       	ldd	r24, Z+9	; 0x09
 324:	98 17       	cp	r25, r24
 326:	41 f0       	breq	.+16     	; 0x338 <rb_pop_front_C+0x1e>
 328:	df 01       	movw	r26, r30
 32a:	a2 0f       	add	r26, r18
 32c:	b3 1f       	adc	r27, r19
 32e:	8c 91       	ld	r24, X
 330:	9f 5f       	subi	r25, 0xFF	; 255
 332:	9f 70       	andi	r25, 0x0F	; 15
 334:	90 87       	std	Z+8, r25	; 0x08
 336:	08 95       	ret
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	08 95       	ret

0000033c <__subsf3>:
 33c:	50 58       	subi	r21, 0x80	; 128

0000033e <__addsf3>:
 33e:	bb 27       	eor	r27, r27
 340:	aa 27       	eor	r26, r26
 342:	0e 94 b6 01 	call	0x36c	; 0x36c <__addsf3x>
 346:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_round>
 34a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__fp_pscA>
 34e:	38 f0       	brcs	.+14     	; 0x35e <__addsf3+0x20>
 350:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__fp_pscB>
 354:	20 f0       	brcs	.+8      	; 0x35e <__addsf3+0x20>
 356:	39 f4       	brne	.+14     	; 0x366 <__addsf3+0x28>
 358:	9f 3f       	cpi	r25, 0xFF	; 255
 35a:	19 f4       	brne	.+6      	; 0x362 <__addsf3+0x24>
 35c:	26 f4       	brtc	.+8      	; 0x366 <__addsf3+0x28>
 35e:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__fp_nan>
 362:	0e f4       	brtc	.+2      	; 0x366 <__addsf3+0x28>
 364:	e0 95       	com	r30
 366:	e7 fb       	bst	r30, 7
 368:	0c 94 48 02 	jmp	0x490	; 0x490 <__fp_inf>

0000036c <__addsf3x>:
 36c:	e9 2f       	mov	r30, r25
 36e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fp_split3>
 372:	58 f3       	brcs	.-42     	; 0x34a <__addsf3+0xc>
 374:	ba 17       	cp	r27, r26
 376:	62 07       	cpc	r22, r18
 378:	73 07       	cpc	r23, r19
 37a:	84 07       	cpc	r24, r20
 37c:	95 07       	cpc	r25, r21
 37e:	20 f0       	brcs	.+8      	; 0x388 <__addsf3x+0x1c>
 380:	79 f4       	brne	.+30     	; 0x3a0 <__addsf3x+0x34>
 382:	a6 f5       	brtc	.+104    	; 0x3ec <__addsf3x+0x80>
 384:	0c 94 92 02 	jmp	0x524	; 0x524 <__fp_zero>
 388:	0e f4       	brtc	.+2      	; 0x38c <__addsf3x+0x20>
 38a:	e0 95       	com	r30
 38c:	0b 2e       	mov	r0, r27
 38e:	ba 2f       	mov	r27, r26
 390:	a0 2d       	mov	r26, r0
 392:	0b 01       	movw	r0, r22
 394:	b9 01       	movw	r22, r18
 396:	90 01       	movw	r18, r0
 398:	0c 01       	movw	r0, r24
 39a:	ca 01       	movw	r24, r20
 39c:	a0 01       	movw	r20, r0
 39e:	11 24       	eor	r1, r1
 3a0:	ff 27       	eor	r31, r31
 3a2:	59 1b       	sub	r21, r25
 3a4:	99 f0       	breq	.+38     	; 0x3cc <__addsf3x+0x60>
 3a6:	59 3f       	cpi	r21, 0xF9	; 249
 3a8:	50 f4       	brcc	.+20     	; 0x3be <__addsf3x+0x52>
 3aa:	50 3e       	cpi	r21, 0xE0	; 224
 3ac:	68 f1       	brcs	.+90     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3ae:	1a 16       	cp	r1, r26
 3b0:	f0 40       	sbci	r31, 0x00	; 0
 3b2:	a2 2f       	mov	r26, r18
 3b4:	23 2f       	mov	r18, r19
 3b6:	34 2f       	mov	r19, r20
 3b8:	44 27       	eor	r20, r20
 3ba:	58 5f       	subi	r21, 0xF8	; 248
 3bc:	f3 cf       	rjmp	.-26     	; 0x3a4 <__addsf3x+0x38>
 3be:	46 95       	lsr	r20
 3c0:	37 95       	ror	r19
 3c2:	27 95       	ror	r18
 3c4:	a7 95       	ror	r26
 3c6:	f0 40       	sbci	r31, 0x00	; 0
 3c8:	53 95       	inc	r21
 3ca:	c9 f7       	brne	.-14     	; 0x3be <__addsf3x+0x52>
 3cc:	7e f4       	brtc	.+30     	; 0x3ec <__addsf3x+0x80>
 3ce:	1f 16       	cp	r1, r31
 3d0:	ba 0b       	sbc	r27, r26
 3d2:	62 0b       	sbc	r22, r18
 3d4:	73 0b       	sbc	r23, r19
 3d6:	84 0b       	sbc	r24, r20
 3d8:	ba f0       	brmi	.+46     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3da:	91 50       	subi	r25, 0x01	; 1
 3dc:	a1 f0       	breq	.+40     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3de:	ff 0f       	add	r31, r31
 3e0:	bb 1f       	adc	r27, r27
 3e2:	66 1f       	adc	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	88 1f       	adc	r24, r24
 3e8:	c2 f7       	brpl	.-16     	; 0x3da <__addsf3x+0x6e>
 3ea:	0e c0       	rjmp	.+28     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3ec:	ba 0f       	add	r27, r26
 3ee:	62 1f       	adc	r22, r18
 3f0:	73 1f       	adc	r23, r19
 3f2:	84 1f       	adc	r24, r20
 3f4:	48 f4       	brcc	.+18     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f6:	87 95       	ror	r24
 3f8:	77 95       	ror	r23
 3fa:	67 95       	ror	r22
 3fc:	b7 95       	ror	r27
 3fe:	f7 95       	ror	r31
 400:	9e 3f       	cpi	r25, 0xFE	; 254
 402:	08 f0       	brcs	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	b0 cf       	rjmp	.-160    	; 0x366 <__addsf3+0x28>
 406:	93 95       	inc	r25
 408:	88 0f       	add	r24, r24
 40a:	08 f0       	brcs	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	99 27       	eor	r25, r25
 40e:	ee 0f       	add	r30, r30
 410:	97 95       	ror	r25
 412:	87 95       	ror	r24
 414:	08 95       	ret

00000416 <__floatunsisf>:
 416:	e8 94       	clt
 418:	09 c0       	rjmp	.+18     	; 0x42c <__floatsisf+0x12>

0000041a <__floatsisf>:
 41a:	97 fb       	bst	r25, 7
 41c:	3e f4       	brtc	.+14     	; 0x42c <__floatsisf+0x12>
 41e:	90 95       	com	r25
 420:	80 95       	com	r24
 422:	70 95       	com	r23
 424:	61 95       	neg	r22
 426:	7f 4f       	sbci	r23, 0xFF	; 255
 428:	8f 4f       	sbci	r24, 0xFF	; 255
 42a:	9f 4f       	sbci	r25, 0xFF	; 255
 42c:	99 23       	and	r25, r25
 42e:	a9 f0       	breq	.+42     	; 0x45a <__floatsisf+0x40>
 430:	f9 2f       	mov	r31, r25
 432:	96 e9       	ldi	r25, 0x96	; 150
 434:	bb 27       	eor	r27, r27
 436:	93 95       	inc	r25
 438:	f6 95       	lsr	r31
 43a:	87 95       	ror	r24
 43c:	77 95       	ror	r23
 43e:	67 95       	ror	r22
 440:	b7 95       	ror	r27
 442:	f1 11       	cpse	r31, r1
 444:	f8 cf       	rjmp	.-16     	; 0x436 <__floatsisf+0x1c>
 446:	fa f4       	brpl	.+62     	; 0x486 <__floatsisf+0x6c>
 448:	bb 0f       	add	r27, r27
 44a:	11 f4       	brne	.+4      	; 0x450 <__floatsisf+0x36>
 44c:	60 ff       	sbrs	r22, 0
 44e:	1b c0       	rjmp	.+54     	; 0x486 <__floatsisf+0x6c>
 450:	6f 5f       	subi	r22, 0xFF	; 255
 452:	7f 4f       	sbci	r23, 0xFF	; 255
 454:	8f 4f       	sbci	r24, 0xFF	; 255
 456:	9f 4f       	sbci	r25, 0xFF	; 255
 458:	16 c0       	rjmp	.+44     	; 0x486 <__floatsisf+0x6c>
 45a:	88 23       	and	r24, r24
 45c:	11 f0       	breq	.+4      	; 0x462 <__floatsisf+0x48>
 45e:	96 e9       	ldi	r25, 0x96	; 150
 460:	11 c0       	rjmp	.+34     	; 0x484 <__floatsisf+0x6a>
 462:	77 23       	and	r23, r23
 464:	21 f0       	breq	.+8      	; 0x46e <__floatsisf+0x54>
 466:	9e e8       	ldi	r25, 0x8E	; 142
 468:	87 2f       	mov	r24, r23
 46a:	76 2f       	mov	r23, r22
 46c:	05 c0       	rjmp	.+10     	; 0x478 <__floatsisf+0x5e>
 46e:	66 23       	and	r22, r22
 470:	71 f0       	breq	.+28     	; 0x48e <__floatsisf+0x74>
 472:	96 e8       	ldi	r25, 0x86	; 134
 474:	86 2f       	mov	r24, r22
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	2a f0       	brmi	.+10     	; 0x486 <__floatsisf+0x6c>
 47c:	9a 95       	dec	r25
 47e:	66 0f       	add	r22, r22
 480:	77 1f       	adc	r23, r23
 482:	88 1f       	adc	r24, r24
 484:	da f7       	brpl	.-10     	; 0x47c <__floatsisf+0x62>
 486:	88 0f       	add	r24, r24
 488:	96 95       	lsr	r25
 48a:	87 95       	ror	r24
 48c:	97 f9       	bld	r25, 7
 48e:	08 95       	ret

00000490 <__fp_inf>:
 490:	97 f9       	bld	r25, 7
 492:	9f 67       	ori	r25, 0x7F	; 127
 494:	80 e8       	ldi	r24, 0x80	; 128
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	08 95       	ret

0000049c <__fp_nan>:
 49c:	9f ef       	ldi	r25, 0xFF	; 255
 49e:	80 ec       	ldi	r24, 0xC0	; 192
 4a0:	08 95       	ret

000004a2 <__fp_pscA>:
 4a2:	00 24       	eor	r0, r0
 4a4:	0a 94       	dec	r0
 4a6:	16 16       	cp	r1, r22
 4a8:	17 06       	cpc	r1, r23
 4aa:	18 06       	cpc	r1, r24
 4ac:	09 06       	cpc	r0, r25
 4ae:	08 95       	ret

000004b0 <__fp_pscB>:
 4b0:	00 24       	eor	r0, r0
 4b2:	0a 94       	dec	r0
 4b4:	12 16       	cp	r1, r18
 4b6:	13 06       	cpc	r1, r19
 4b8:	14 06       	cpc	r1, r20
 4ba:	05 06       	cpc	r0, r21
 4bc:	08 95       	ret

000004be <__fp_round>:
 4be:	09 2e       	mov	r0, r25
 4c0:	03 94       	inc	r0
 4c2:	00 0c       	add	r0, r0
 4c4:	11 f4       	brne	.+4      	; 0x4ca <__fp_round+0xc>
 4c6:	88 23       	and	r24, r24
 4c8:	52 f0       	brmi	.+20     	; 0x4de <__fp_round+0x20>
 4ca:	bb 0f       	add	r27, r27
 4cc:	40 f4       	brcc	.+16     	; 0x4de <__fp_round+0x20>
 4ce:	bf 2b       	or	r27, r31
 4d0:	11 f4       	brne	.+4      	; 0x4d6 <__fp_round+0x18>
 4d2:	60 ff       	sbrs	r22, 0
 4d4:	04 c0       	rjmp	.+8      	; 0x4de <__fp_round+0x20>
 4d6:	6f 5f       	subi	r22, 0xFF	; 255
 4d8:	7f 4f       	sbci	r23, 0xFF	; 255
 4da:	8f 4f       	sbci	r24, 0xFF	; 255
 4dc:	9f 4f       	sbci	r25, 0xFF	; 255
 4de:	08 95       	ret

000004e0 <__fp_split3>:
 4e0:	57 fd       	sbrc	r21, 7
 4e2:	90 58       	subi	r25, 0x80	; 128
 4e4:	44 0f       	add	r20, r20
 4e6:	55 1f       	adc	r21, r21
 4e8:	59 f0       	breq	.+22     	; 0x500 <__fp_splitA+0x10>
 4ea:	5f 3f       	cpi	r21, 0xFF	; 255
 4ec:	71 f0       	breq	.+28     	; 0x50a <__fp_splitA+0x1a>
 4ee:	47 95       	ror	r20

000004f0 <__fp_splitA>:
 4f0:	88 0f       	add	r24, r24
 4f2:	97 fb       	bst	r25, 7
 4f4:	99 1f       	adc	r25, r25
 4f6:	61 f0       	breq	.+24     	; 0x510 <__fp_splitA+0x20>
 4f8:	9f 3f       	cpi	r25, 0xFF	; 255
 4fa:	79 f0       	breq	.+30     	; 0x51a <__fp_splitA+0x2a>
 4fc:	87 95       	ror	r24
 4fe:	08 95       	ret
 500:	12 16       	cp	r1, r18
 502:	13 06       	cpc	r1, r19
 504:	14 06       	cpc	r1, r20
 506:	55 1f       	adc	r21, r21
 508:	f2 cf       	rjmp	.-28     	; 0x4ee <__fp_split3+0xe>
 50a:	46 95       	lsr	r20
 50c:	f1 df       	rcall	.-30     	; 0x4f0 <__fp_splitA>
 50e:	08 c0       	rjmp	.+16     	; 0x520 <__fp_splitA+0x30>
 510:	16 16       	cp	r1, r22
 512:	17 06       	cpc	r1, r23
 514:	18 06       	cpc	r1, r24
 516:	99 1f       	adc	r25, r25
 518:	f1 cf       	rjmp	.-30     	; 0x4fc <__fp_splitA+0xc>
 51a:	86 95       	lsr	r24
 51c:	71 05       	cpc	r23, r1
 51e:	61 05       	cpc	r22, r1
 520:	08 94       	sec
 522:	08 95       	ret

00000524 <__fp_zero>:
 524:	e8 94       	clt

00000526 <__fp_szero>:
 526:	bb 27       	eor	r27, r27
 528:	66 27       	eor	r22, r22
 52a:	77 27       	eor	r23, r23
 52c:	cb 01       	movw	r24, r22
 52e:	97 f9       	bld	r25, 7
 530:	08 95       	ret

00000532 <__mulsf3>:
 532:	0e 94 ac 02 	call	0x558	; 0x558 <__mulsf3x>
 536:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_round>
 53a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__fp_pscA>
 53e:	38 f0       	brcs	.+14     	; 0x54e <__mulsf3+0x1c>
 540:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__fp_pscB>
 544:	20 f0       	brcs	.+8      	; 0x54e <__mulsf3+0x1c>
 546:	95 23       	and	r25, r21
 548:	11 f0       	breq	.+4      	; 0x54e <__mulsf3+0x1c>
 54a:	0c 94 48 02 	jmp	0x490	; 0x490 <__fp_inf>
 54e:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__fp_nan>
 552:	11 24       	eor	r1, r1
 554:	0c 94 93 02 	jmp	0x526	; 0x526 <__fp_szero>

00000558 <__mulsf3x>:
 558:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fp_split3>
 55c:	70 f3       	brcs	.-36     	; 0x53a <__mulsf3+0x8>

0000055e <__mulsf3_pse>:
 55e:	95 9f       	mul	r25, r21
 560:	c1 f3       	breq	.-16     	; 0x552 <__mulsf3+0x20>
 562:	95 0f       	add	r25, r21
 564:	50 e0       	ldi	r21, 0x00	; 0
 566:	55 1f       	adc	r21, r21
 568:	62 9f       	mul	r22, r18
 56a:	f0 01       	movw	r30, r0
 56c:	72 9f       	mul	r23, r18
 56e:	bb 27       	eor	r27, r27
 570:	f0 0d       	add	r31, r0
 572:	b1 1d       	adc	r27, r1
 574:	63 9f       	mul	r22, r19
 576:	aa 27       	eor	r26, r26
 578:	f0 0d       	add	r31, r0
 57a:	b1 1d       	adc	r27, r1
 57c:	aa 1f       	adc	r26, r26
 57e:	64 9f       	mul	r22, r20
 580:	66 27       	eor	r22, r22
 582:	b0 0d       	add	r27, r0
 584:	a1 1d       	adc	r26, r1
 586:	66 1f       	adc	r22, r22
 588:	82 9f       	mul	r24, r18
 58a:	22 27       	eor	r18, r18
 58c:	b0 0d       	add	r27, r0
 58e:	a1 1d       	adc	r26, r1
 590:	62 1f       	adc	r22, r18
 592:	73 9f       	mul	r23, r19
 594:	b0 0d       	add	r27, r0
 596:	a1 1d       	adc	r26, r1
 598:	62 1f       	adc	r22, r18
 59a:	83 9f       	mul	r24, r19
 59c:	a0 0d       	add	r26, r0
 59e:	61 1d       	adc	r22, r1
 5a0:	22 1f       	adc	r18, r18
 5a2:	74 9f       	mul	r23, r20
 5a4:	33 27       	eor	r19, r19
 5a6:	a0 0d       	add	r26, r0
 5a8:	61 1d       	adc	r22, r1
 5aa:	23 1f       	adc	r18, r19
 5ac:	84 9f       	mul	r24, r20
 5ae:	60 0d       	add	r22, r0
 5b0:	21 1d       	adc	r18, r1
 5b2:	82 2f       	mov	r24, r18
 5b4:	76 2f       	mov	r23, r22
 5b6:	6a 2f       	mov	r22, r26
 5b8:	11 24       	eor	r1, r1
 5ba:	9f 57       	subi	r25, 0x7F	; 127
 5bc:	50 40       	sbci	r21, 0x00	; 0
 5be:	9a f0       	brmi	.+38     	; 0x5e6 <__mulsf3_pse+0x88>
 5c0:	f1 f0       	breq	.+60     	; 0x5fe <__mulsf3_pse+0xa0>
 5c2:	88 23       	and	r24, r24
 5c4:	4a f0       	brmi	.+18     	; 0x5d8 <__mulsf3_pse+0x7a>
 5c6:	ee 0f       	add	r30, r30
 5c8:	ff 1f       	adc	r31, r31
 5ca:	bb 1f       	adc	r27, r27
 5cc:	66 1f       	adc	r22, r22
 5ce:	77 1f       	adc	r23, r23
 5d0:	88 1f       	adc	r24, r24
 5d2:	91 50       	subi	r25, 0x01	; 1
 5d4:	50 40       	sbci	r21, 0x00	; 0
 5d6:	a9 f7       	brne	.-22     	; 0x5c2 <__mulsf3_pse+0x64>
 5d8:	9e 3f       	cpi	r25, 0xFE	; 254
 5da:	51 05       	cpc	r21, r1
 5dc:	80 f0       	brcs	.+32     	; 0x5fe <__mulsf3_pse+0xa0>
 5de:	0c 94 48 02 	jmp	0x490	; 0x490 <__fp_inf>
 5e2:	0c 94 93 02 	jmp	0x526	; 0x526 <__fp_szero>
 5e6:	5f 3f       	cpi	r21, 0xFF	; 255
 5e8:	e4 f3       	brlt	.-8      	; 0x5e2 <__mulsf3_pse+0x84>
 5ea:	98 3e       	cpi	r25, 0xE8	; 232
 5ec:	d4 f3       	brlt	.-12     	; 0x5e2 <__mulsf3_pse+0x84>
 5ee:	86 95       	lsr	r24
 5f0:	77 95       	ror	r23
 5f2:	67 95       	ror	r22
 5f4:	b7 95       	ror	r27
 5f6:	f7 95       	ror	r31
 5f8:	e7 95       	ror	r30
 5fa:	9f 5f       	subi	r25, 0xFF	; 255
 5fc:	c1 f7       	brne	.-16     	; 0x5ee <__mulsf3_pse+0x90>
 5fe:	fe 2b       	or	r31, r30
 600:	88 0f       	add	r24, r24
 602:	91 1d       	adc	r25, r1
 604:	96 95       	lsr	r25
 606:	87 95       	ror	r24
 608:	97 f9       	bld	r25, 7
 60a:	08 95       	ret

0000060c <_exit>:
 60c:	f8 94       	cli

0000060e <__stop_program>:
 60e:	ff cf       	rjmp	.-2      	; 0x60e <__stop_program>
